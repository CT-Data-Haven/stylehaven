% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/write_plot.R
\name{write_plot}
\alias{write_plot}
\title{Batch save plots to multiple formats.}
\usage{
write_plot(
  plot,
  filename,
  width = 7,
  height = 4.5,
  add_logo = TRUE,
  use_abs_logo = TRUE,
  logo_abs = 0.15,
  logo_scale = 0.05,
  logo_img = NULL,
  logo_pos = "right",
  place_inside = FALSE,
  dir = NULL,
  separate_dirs = TRUE,
  devs = list(pdf = grDevices::cairo_pdf, png = ragg::agg_png),
  verbose = TRUE,
  ...
)
}
\arguments{
\item{plot}{A \code{ggplot} object to save}

\item{filename}{String, the filename without extension, e.g. \code{"cool_plot"} rather than \code{"cool_plot.png"}, since extensions will be added based on the \code{devs} argument.}

\item{width}{Numeric, width of saved plot in inches. Default: 7}

\item{height}{Numeric, height of saved plot in inches. Doesn't include any additional height for the logo. Default: 4.5}

\item{add_logo}{Logical: if \code{TRUE} (default), a logo will be added to each plot using \code{add_logo}.}

\item{use_abs_logo}{Logical, whether the logo size is being supplied as absolute (if \code{TRUE}) or relative to the plot height (if \code{FALSE}). If \code{TRUE} (default), the logo will be the height given in \code{logo_abs} in inches; otherwise, the logo will be sized as the ratio to the plot height as given in \code{logo_scale}. For batch writing plots, using an absolute size is probably best so the logo is the same size on all charts, regardless of each chart's height.}

\item{logo_abs}{The absolute height for the logo, in inches. Ignored if \code{use_abs_logo = FALSE}. Default: 0.15}

\item{logo_scale}{The ratio of the logo's height to the plot's height. Ignored if \code{use_abs_logo = TRUE}. Default: 0.05}

\item{logo_img}{If \code{NULL} (the default), the logo will be the image saved at \code{system.file("extdata/logo.svg", package = "stylehaven")}, which is a copy of DataHaven's logo. See \code{\link{add_logo}} for other ways to create and supply a logo, with one exception: this function won't handle \code{ggplot} objects as logos the way \code{add_logo} can.}

\item{logo_pos}{String, which side of the plot the logo should be placed on. Default: 'right'}

\item{place_inside}{Logical, whether the logo should be placed on the inside of the chart or the outside (default). Note that this is the opposite of the default in \code{add_logo}—often placing the logo inside the chart works well, but for batch writing it's probably safer to either default to outside placement, or use a parameter for this alongside the width & height.}

\item{dir}{Directory in which to write files. If \code{NULL}, the default, this will just be the working directory, as is the case with \code{ggplot2::ggsave}.}

\item{separate_dirs}{Logical, whether to save files into separate directories based on file type. If \code{TRUE} (default), the file \code{"cool_plot.png"} will be written to \code{"dir/png/cool_plot.png"}; otherwise, the file will be written just in \code{dir}. If the necessary directories don't already exist, they'll be created.}

\item{devs}{A named list, where the names are the extensions to use for output files and the values specify graphics devices to use, either as strings or functions (or a mix). See the \code{device} argument of \code{\link[ggplot2:ggsave]{ggplot2::ggsave()}} for examples. The defaults, \code{c(pdf = cairo_pdf, png = ragg::agg_png)}, are the ones that I've found to work well for writing out \code{ggplot}s, particularly high-resolution ones with custom fonts.}

\item{verbose}{Logical, whether to print the path to each file after it's written (defaults \code{TRUE}).}

\item{...}{Additional arguments to pass on to \code{ggplot2::ggsave}, which in turn passes them to graphics devices.}
}
\value{
Returns nothing. If \code{verbose = TRUE}, sends a message to the console.
}
\description{
This is a formalized version of a function I often have in utils scripts for different projects. It works well when paired with \code{purrr::map}, taking a list of plots and a list of parameters for each (width, height, filename), and saving each to both PDF (good as a vector format) and PNG (good as a decent resolution bitmap format) files using \code{ggplot2::ggsave}. By default, this will add a logo to the bottom of the plot using \code{\link{add_logo}}—look at the documentation to see exactly how to pass a logo. Note that some devices might act differently: for example, SVG devices might have some quirks.
}
\examples{
\dontrun{
  library(ggplot2)
  plot1 <- ggplot(mtcars, aes(x = hp)) +
    geom_density()
  write_plot(plot1, "hp_density")
  write_plot(plot1, "hp_density", devs = list(png = "png", svg = svg))
  ggsave("svg/plot.svg", plot1, device = svglite::svglite)

  # how I usually use this for a whole document of plots
  plots <- list()
  plots[["mpg_histogram"]] <- ggplot(mtcars, aes(x = mpg)) +
    geom_histogram()
  plots[["hp_vs_mpg"]] <- ggplot(mtcars, aes(x = hp, y = mpg)) +
    geom_point()
  plot_params <- list(
    mpg_histogram = list(w = 7, h = 4),
    hp_vs_mpg = list(w = 5, h = 5)
  )
  purrr::imap(plots, function(plt, id) {
    # using plot ID as the filename
    params <- plot_params[[id]]
    write_plot(plt, filename = id,
               width = params$w,
               height = params$h,
               logo_abs = 0.2)
  })
}
}
\seealso{
\code{\link[=add_logo]{add_logo()}}, \code{\link[ggplot2:ggsave]{ggplot2::ggsave()}}
}
\keyword{exporting}
