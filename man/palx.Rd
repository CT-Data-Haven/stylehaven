% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/palx.R
\name{palx}
\alias{palx}
\alias{as_tibble.palx}
\alias{plot_palx}
\title{Make multi-hue, multi-shade qualitative color palettes}
\source{
\url{https://github.com/jxnblk/palx}
}
\usage{
palx(
  color,
  n_hues = 8,
  n_shades = 9,
  row = NULL,
  as_df = FALSE,
  plot = FALSE,
  labels = FALSE
)

\method{as_tibble}{palx}(x, ...)

plot_palx(x, ..., labels = FALSE)
}
\arguments{
\item{color}{A string of a color name (\code{"red"}) or hex code (\code{"#6f54d6"}).' This should be a single value, as it's the color the palette will be based around, though it's not guaranteed that this exact color will be in the final palette.}

\item{n_hues}{A number between 1 and 12. The number of hues returned will be this + 1, because a gray color will be added.}

\item{n_shades}{A number, for the number of shades to return for each hue. Defaults 9; too many more than that will probably become hard to distinguish.}

\item{row}{Numeric. If \code{NULL}, the default, all rows (shades) are returned. Otherwise, only the rows with these indices are returned. Just a shortcut for subsetting the list.}

\item{as_df}{Logical, whether to return a data frame (\code{as_df = TRUE}) or a list of character vectors. Defaults \code{FALSE}.}

\item{plot}{Logical, whether to call \code{plot_palx} before returning. This doesn't change what the function returns, it just prints out a ggplot chart and returns the colors as normal. Defaults \code{FALSE}.}

\item{labels}{Logical, whether to add labels on each tile giving colors' hex codes. Defaults \code{FALSE}.}

\item{x}{The output of calling \code{palx}, as either a list or data frame}

\item{...}{Not used}
}
\value{
If \code{as_df = TRUE}, a tibble with \code{n_shades} rows by one column per hue, plus a column giving the shade number. Otherwise, a named list (length \code{n_shades}) of character vectors, where each list item represents one shade. Both the tibble and named list are extended with the "palx" class, so that users can conveniently run \code{plot(my_palx)} or \code{as_tibble(my_palx)}.
}
\description{
\code{palx} is based on the Palx javascript library, basically a port of its core functions using the \code{colorspace} package. Provided a base color, it pulls a set of hues from across the spectrum with the same lightness and saturation, plus a gray color. It then creates shades of those hues from nearly black to nearly white. You probably don't actually want every hue; it's just a good way to get a bunch of colors to choose from.

You can view a palette graphically by running \code{plot(my_palx)}, by setting \code{plot = TRUE}, or by more directly calling \code{plot_palx}. This creates a grid of hue vs. shade tiles.
}
\details{
Some notes about color:
\itemize{
\item Hue refers to what would commonly be the general name of a color, e.g. blue or yellow.
\item Shade refers to how light or dark a color is, e.g. light blue, dark blue.
\item Saturation refers to the strength of a color, or its distance from a neutral gray.
}

The color spectrum is broken up into even chunks, but there's a set of wavelengths that appear pretty similar--this shows up in the lime-green-teal-cyan-blue colors. That's just how human eyeballs work I guess.

These palettes shouldn't be used for sequential palettes, even pulling multiple shades from one hue. Good sequential palettes are corrected for perceptual differences in shade, whereas this just takes even steps. Also please don't use rainbow scales for sequential data.

You likely only want one or two shades worth of colors (use the \code{row} arguments), either adjacent for colors that appear "even", or one light and one dark for a paired palette. Saturated colors that aren't too dark or too light work best.
}
\examples{
palx("#9CCC0C") # returns a list
palx("#9CCC0C", as_df = TRUE) # returns a data frame

# bad examples all with one hue that return weird / not very useful palettes
palx("#ccf4fa") # saturated but too light
palx("#6c888d") # not too light, but not saturated enough
palx("#0e91a7") # much better--high saturation, middle lightness
}
\seealso{
\code{\link[colorspace:lighten]{colorspace::lighten()}}
}
