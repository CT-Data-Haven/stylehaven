[{"path":"https://ct-data-haven.github.io/stylehaven/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 stylehaven authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/articles/stylehaven.html","id":"color-and-styling","dir":"Articles","previous_headings":"","what":"Color and styling","title":"stylehaven: Getting started","text":"Illustrates: Creating multiple weights font use across charts font_add_weights Creating array color palettes based primary color  good time check contrast colors palette dark light colors might use labels. contrast_colors() helps make sure background text colors enough contrast legible readers low vision. none color combinations enough contrast verbose = TRUE, ’ll get diagnostic messages pointing contrast ratios work increase (’s example docs).  bit tweaking, colors palette label color sufficiently high-contrast. ’ll keep plots one named list, output parameters (width & height, also include something like logo placement) another named list. ’ll map save plots PDF PNG. list widths & heights also makes easier dimensions within document (chunk fig-width fig-height) ’re exported.","code":"font_add_weights(\"Barlow Semi Condensed\", semibold = 500) #> ℹ Registering the following fonts: #> • Barlow Semi Condensed with regular weight 400 and bold weight 700 #> • Barlow Semi Condensed Semibold with semibold weight 500 and black weight 900  base_col <- \"#287FC8\" palx_colors <- palx(base_col, n_shades = 6, plot = TRUE) qual_pal <- palx_colors[[\"shade04\"]] # use with offset labels to make white labels inside bars, dark gray labels outside tf_pal <- c(\"TRUE\" = palx_colors[[\"shade02\"]][[\"gray\"]], \"FALSE\" = \"white\") dark_gray <- unname(palx_colors[[\"shade01\"]][\"gray\"]) # super dark tinted gray contrast_colors(qual_pal,     dark = dark_gray,     light = \"white\",     labels_only = FALSE, plot = TRUE ) #>      fill  dark light   max lbl_color low_contrast #> 1 #DC50BE  5.04  3.54  5.04   #15181B        FALSE #> 2 #DC5050  4.50  3.96  4.50   #15181B        FALSE #> 3 #DC9650  7.23  2.46  7.23   #15181B        FALSE #> 4 #B4DC50 11.28  1.58 11.28   #15181B        FALSE #> 5 #50DC59  9.95  1.79  9.95   #15181B        FALSE #> 6 #50DCC8 10.53  1.69 10.53   #15181B        FALSE #> 7 #5082DC  4.72  3.77  4.72   #15181B        FALSE #> 8 #8C50DC  3.65  4.89  4.89     white        FALSE #> 9 #8997A3  5.96  2.99  5.96   #15181B        FALSE theme_bar <- function(x, ...) {     theme_gray(base_family = \"Barlow Semi Condensed\") +         theme(             plot.caption.position = \"plot\",             plot.title.position = \"plot\",             strip.text = element_text(                 family = \"Barlow Semi Condensed Semibold\",                 face = \"plain\", hjust = 0             ),             panel.background = element_rect(fill = \"white\", color = NULL),             axis.ticks = element_blank()         ) } theme_set(theme_bar()) update_geom_defaults(\"col\", list(fill = base_col)) update_geom_defaults(\"text\", list(     size = 3.5, fontface = \"bold\",     family = \"Barlow Semi Condensed\", color = \"white\" ))  mini_pal <- unname(c(     palx_colors[[\"shade01\"]][\"gray\"],     palx_colors[[\"shade03\"]][\"gray\"],     qual_pal[c(\"orange\", \"red\", \"indigo\", \"blue\", \"teal\")] )) plots <- list() plot_params <- list(     health_split = list(w = 7, h = 3),     health_stack = list(w = 7, h = 4.5),     age_heatmap = list(w = 4.5, h = 5) )"},{"path":"https://ct-data-haven.github.io/stylehaven/articles/stylehaven.html","id":"facetted-bar-chart","dir":"Articles","previous_headings":"","what":"Facetted bar chart","title":"stylehaven: Getting started","text":"Illustrates: Offsetting labels across multiple scales offset_lbls String formatting functions","code":"# using just last 5 colors from mini_pal health_to_plot1 <- self_rated_health |>     group_by(response) |>     offset_lbls(value = value, thresh = 0.5, fun = percent100)  head(health_to_plot1) #> # A tibble: 6 × 9 #> # Groups:   response [5] #>   category group       response  value is_small     off value_off  just lbl   #>   <fct>    <fct>       <fct>     <dbl> <lgl>      <dbl>     <dbl> <dbl> <chr> #> 1 Total    Connecticut Excellent  0.19 FALSE    -0.01       0.18      1 19%   #> 2 Total    Connecticut Very good  0.34 FALSE    -0.017      0.323     1 34%   #> 3 Total    Connecticut Good       0.29 FALSE    -0.0185     0.271     1 29%   #> 4 Total    Connecticut Fair       0.14 FALSE    -0.011      0.129     1 14%   #> 5 Total    Connecticut Poor       0.04 TRUE      0.009      0.049     0 4%    #> 6 Gender   Male        Excellent  0.2  FALSE    -0.01       0.19      1 20%  plots[[\"health_split\"]] <- ggplot(health_to_plot1, aes(x = value, y = forcats::fct_rev(group))) +     geom_col(width = 0.8) +     geom_text(aes(label = lbl, x = value_off, hjust = just, color = is_small)) +     scale_x_barcontinuous(breaks = NULL) +     scale_color_manual(values = tf_pal, guide = guide_none()) +     facet_grid(cols = vars(forcats::fct_rev(response)), scales = \"free\", space = \"free_x\") +     theme(panel.spacing.x = unit(0.8, \"lines\")) +     labs(         x = NULL, y = NULL,         title = \"Nonbinary adults are much less likely to report being in very good or excellent health\",         subtitle = \"Share of adults by gender and response to self-rated health, Connecticut, 2024\"     )  plots[[\"health_split\"]]"},{"path":"https://ct-data-haven.github.io/stylehaven/articles/stylehaven.html","id":"labeling-endpoints","dir":"Articles","previous_headings":"","what":"Labeling endpoints","title":"stylehaven: Getting started","text":"endpoint_lbls adds columns labels offset slightly left lower limit right upper limit, corresponding hjust value align left-hand labels end string right-hand labels start string, labels use include grouping variable one sides. encourages direct labeling wean away legends. One thing deal margins plot: can set padding expansion, changes limits scale well, might need adjust breaks. ’s easy enough slopegraphs like get annoying don’t know exactly breaks need .  want switch sides long label (long_side argument endpoint_lbls), thing need change padding x-axis—everything else data frame. just lines, full labels just left right fine, ’s also option add labels sides, can help make lines easier read","code":"police_trend_to_plot <- cws_trend |>     filter(question == \"police_approval\") |>     endpoint_lbls(         x = year, value = value, group = group,         fun = percent100, long_side = \"left\"     )  head(police_trend_to_plot) #> # A tibble: 6 × 8 #>   question         year category group             value     x  just lbl         #>   <fct>           <dbl> <fct>    <fct>             <dbl> <dbl> <dbl> <chr>       #> 1 police_approval  2015 Total    Connecticut        0.78 2015.     1 Connecticu… #> 2 police_approval  2015 Total    Greater New Haven  0.74 2015.     1 Greater Ne… #> 3 police_approval  2015 Age      Ages 18-34         0.69 2015.     1 Ages 18-34… #> 4 police_approval  2015 Age      Ages 35-49         0.7  2015.     1 Ages 35-49… #> 5 police_approval  2015 Age      Ages 50-64         0.77 2015.     1 Ages 50-64… #> 6 police_approval  2015 Age      Ages 65+           0.81 2015.     1 Ages 65+: …  if (require(\"ggrepel\")) {     ggplot(police_trend_to_plot, aes(x = year, y = value, color = group, group = group)) +         geom_path(linewidth = 3) +         geom_point(size = 4) +         # set text positions with calculated offsets         # geom_text(aes(label = lbl, x = x, hjust = just)) +         # better to use ggrepel to not overlap labels         ggrepel::geom_text_repel(aes(label = lbl, x = x, hjust = just),             seed = 10,             size = 3.5, fontface = \"bold\", direction = \"y\",             family = \"Barlow Semi Condensed\", box.padding = 0.15         ) +         scale_x_continuous(expand = expansion(add = c(3.5, 1)), breaks = c(2015, 2024)) +         scale_y_continuous(breaks = NULL) +         scale_color_manual(values = mini_pal) +         theme(             legend.position = \"none\",             panel.grid.major.x = element_line(color = \"gray90\")         ) +         labs(             x = NULL, y = NULL,             title = \"Approval of police has fallen among all but the oldest adults\",             subtitle = \"Share of Greater New Haven adults, 2015-2024\"         ) }"},{"path":"https://ct-data-haven.github.io/stylehaven/articles/stylehaven.html","id":"separating-squished-labels","dir":"Articles","previous_headings":"","what":"Separating squished labels","title":"stylehaven: Getting started","text":"Dot plots points directly labeled great values close together, ’s pain keep labels overlapping. One nice way handle calculate distance points line (whatever’s independent variable) offset labels within threshold label. data frame returns can used semi_join anti_join make 2 calls geom_text/geom_text_repel. argument thresh = 0.5 means values difference 0.5 considered close; absolute value.","code":"hartford_age <- median_age |>     mutate(name = forcats::as_factor(name)) |>     filter(name %in% c(\"Connecticut\", \"Capitol COG\", \"Hartford\", \"New Britain\", \"West Hartford\"))  age_to_dodge <- hartford_age |>     dodge_lbls(x = sex, value = value, group = name, thresh = 0.5)  ggplot(hartford_age, aes(x = value, y = forcats::fct_rev(sex), color = name)) +     geom_point(size = 9, alpha = 0.9) +     # labels that don't need dodging     geom_text(aes(label = value),         data = ~ anti_join(., age_to_dodge, by = c(\"sex\", \"name\")),         color = \"white\", size = 3.2     ) +     # labels that do need dodging     ggrepel::geom_text_repel(aes(label = value),         data = ~ semi_join(., age_to_dodge, by = c(\"sex\", \"name\")),         seed = 1, direction = \"x\", nudge_y = 0.35,         family = \"Barlow Semi Condensed\", fontface = \"bold\",         size = 3.2, show.legend = FALSE     ) +     scale_color_manual(         values = mini_pal,         guide = guide_legend(override.aes = list(size = 4))     ) +     scale_x_continuous(breaks = NULL) +     scale_y_discrete(labels = title_case) +     theme(panel.grid.major.y = element_line(color = \"gray90\")) +     labs(         x = NULL, y = NULL, color = NULL,         title = \"Median age by sex\",         subtitle = \"Median age in years, Hartford area, 2023\"     )"},{"path":"https://ct-data-haven.github.io/stylehaven/articles/stylehaven.html","id":"stacking-labels","dir":"Articles","previous_headings":"","what":"Stacking labels","title":"stylehaven: Getting started","text":"Positioning stacked labels often simple enough position_stack position_fill, sometimes need tailored placement. reasons making labels alongside stacked bars replace legend, situations values small need labels offset. stack_lbls calculates placement labels proportion within bar. based cumulative sums, take care data arranged.  bottom bars really small; smaller bars larger labels, might offset small ones side.","code":"health_to_plot2 <- self_rated_health |>     mutate(response = forcats::fct_rev(response)) |>     arrange(group, response) |>     group_by(group) |>     mutate(stack = stack_lbls(value, fill = TRUE)) |>     ungroup()  head(health_to_plot2) #> # A tibble: 6 × 5 #>   category group       response  value stack #>   <fct>    <fct>       <fct>     <dbl> <dbl> #> 1 Total    Connecticut Poor       0.04 0.02  #> 2 Total    Connecticut Fair       0.14 0.11  #> 3 Total    Connecticut Good       0.29 0.325 #> 4 Total    Connecticut Very good  0.34 0.64  #> 5 Total    Connecticut Excellent  0.19 0.905 #> 6 Gender   Male        Poor       0.04 0.02  plots[[\"health_stack\"]] <- ggplot(health_to_plot2, aes(x = group, y = value, fill = response, group = group)) +     geom_col(width = 0.8, position = position_fill()) +     geom_text(aes(label = percent100(value), y = stack),         color = dark_gray     ) +     scale_fill_manual(values = mini_pal[3:7], guide = guide_legend(reverse = TRUE)) +     scale_y_barcontinuous(breaks = NULL) +     labs(         x = NULL, y = NULL, fill = \"Response\",         title = \"Self-rated health by gender\",         subtitle = \"Share of adults, Connecticut, 2024\"     )  plots[[\"health_stack\"]]"},{"path":"https://ct-data-haven.github.io/stylehaven/articles/stylehaven.html","id":"standard-deviation-breaks","dir":"Articles","previous_headings":"","what":"Standard deviation breaks","title":"stylehaven: Getting started","text":"Sometimes tables dense grids plots, color things based many standard deviations away mean value . stdev_brks , either calculating mean filtering comparison value, like statewide value data. case ’ll compare towns’ median ages sex state’s overall median age. ’s useful chart illustrates function.","code":"div_pal <- c(\"#0060B8\", \"#649EE6\", \"#C9C9C9\", \"#D48A50\", \"#944800\") age_std <- median_age |>     stdev_brks(         value = value,         filters = list(name = \"Connecticut\", sex = \"total\"),         labels = c(\"Much younger\", \"Younger\", \"Similar to COG\", \"Older\", \"Much older\")     )  head(age_std) #> # A tibble: 6 × 9 #>   level  county name        sex    value midpt    sd       z brk            #>   <fct>  <chr>  <chr>       <fct>  <dbl> <dbl> <dbl>   <dbl> <fct>          #> 1 state  <NA>   Connecticut total   41.2  41.2  5.16  0      Similar to COG #> 2 state  <NA>   Connecticut male    39.8  41.2  5.16 -0.271  Similar to COG #> 3 state  <NA>   Connecticut female  42.5  41.2  5.16  0.252  Similar to COG #> 4 county <NA>   Capitol COG total   40.2  41.2  5.16 -0.194  Similar to COG #> 5 county <NA>   Capitol COG male    38.7  41.2  5.16 -0.484  Similar to COG #> 6 county <NA>   Capitol COG female  41.7  41.2  5.16  0.0969 Similar to COG  # for simplicity, just plot Greater Bridgeport towns plots[[\"age_heatmap\"]] <- age_std |>     filter(county == \"Capitol COG\") |>     mutate(name = forcats::as_factor(name) |>         forcats::fct_reorder2(desc(sex), value)) |>     ggplot(aes(x = sex, y = name, fill = brk)) +     geom_tile(color = dark_gray) +     # rcartocolor::scale_fill_carto_d(palette = \"Geyser\") +     scale_fill_manual(values = div_pal) +     scale_x_discrete(labels = title_case) +     labs(         x = NULL, y = NULL, fill = \"Compared to CT...\",         title = \"Median age by town and sex\",         subtitle = \"Capitol COG towns compared to statewide, 2023\"     )  plots[[\"age_heatmap\"]]"},{"path":"https://ct-data-haven.github.io/stylehaven/articles/stylehaven.html","id":"tables-more-string-formatting","dir":"Articles","previous_headings":"","what":"Tables & more string formatting","title":"stylehaven: Getting started","text":"’ve beefed string formatting functions added help making tables, especially HTML narrative output. functions plus glue secret behind town equity reports’ text. 2024, 51 percent Connecticut adults felt local police good job keep residents safe, compared 48 percent Greater New Haven adults. Thirty-two percent Greater New Haven adults ages 18 34 reported . -engineered example dynamically aligning table columns based data, ’s helpful bigger tables different versions table might different sets columns.","code":"govt_to_text <- cws_trend |>     filter(year == 2024, question == \"local_govt_responsive\") |>     select(group, value) |>     tibble::deframe()  cat(     stringr::str_glue(\"> In 2024, {percent_txt(govt_to_text['Connecticut'])} of Connecticut                     adults felt their local police did a good job to keep                     residents safe, compared to                     {percent_txt(govt_to_text['Greater New Haven'])} of                     Greater New Haven adults.                     {percent_eng(govt_to_text['Ages 18-34'])} of Greater                     New Haven adults ages 18 to 34 reported the same.\") ) cws_to_tbl <- cws_trend |>     filter(year == 2024) |>     tidyr::pivot_wider(id_cols = c(category, group), names_from = question)  head(cws_to_tbl) #> # A tibble: 6 × 5 #>   category group             local_govt_responsive police_approval good_parks #>   <fct>    <fct>                             <dbl>           <dbl>      <dbl> #> 1 Total    Connecticut                        0.51            0.72       0.74 #> 2 Total    Greater New Haven                  0.48            0.65       0.71 #> 3 Age      Ages 18-34                         0.32            0.46       0.62 #> 4 Age      Ages 35-49                         0.44            0.62       0.67 #> 5 Age      Ages 50-64                         0.52            0.72       0.74 #> 6 Age      Ages 65+                           0.67            0.84       0.86  # imagine I'm not sure how many left-aligned (categorical) columns there will be, # but I can calculate the number of right-aligned (numeric) columns based on the # question levels cws_align <- align_cols(     r = length(levels(cws_trend$question)),     total = ncol(cws_to_tbl) )  cws_to_tbl |>     rename(         local_govt_is_responsive = local_govt_responsive,         approve_of_police = police_approval,         parks_in_good_condition = good_parks     ) |>     rename_with(title_case) |>     mutate(across(where(is.numeric), percent100)) |>     knitr::kable(align = cws_align)"},{"path":"https://ct-data-haven.github.io/stylehaven/articles/stylehaven.html","id":"batch-writing-image-files","dir":"Articles","previous_headings":"","what":"Batch writing image files","title":"stylehaven: Getting started","text":"Batch image functions came exporting thousands plots equity reports, way go lists plots plot parameters think write plots , adding & scaling logos. default, add logo (using stylehaven::add_logo) adjust height plot fit aspect ratio stays even appending logo bottom image. Writing one plot (default, PNG & PDF): Even better, iterating plots plot params write plots. One thing note careful ’re matching plots params ’re separate lists: might get messed lists order, even ’re named. (bothered enough post question Stack Overflow.) can map one list use names pull entries list.","code":"out_dir <- file.path(tempdir(), \"plots\") if (!dir.exists(out_dir)) dir.create(out_dir)  write_plot(plots[[\"health_split\"]],     filename = \"health_split\", add_logo = FALSE,     dir = out_dir,     width = plot_params[[\"health_split\"]]$w,     height = plot_params[[\"health_split\"]]$h )  list.files(out_dir, recursive = TRUE) #> [1] \"pdf/health_split.pdf\" \"png/health_split.png\" purrr::iwalk(plots, function(pl, id) {     ps <- plot_params[[id]]     write_plot(pl,         filename = id, add_logo = FALSE,         dir = out_dir, width = ps$w, height = ps$h     ) })  list.files(out_dir, recursive = TRUE) #> [1] \"pdf/age_heatmap.pdf\"  \"pdf/health_split.pdf\" \"pdf/health_stack.pdf\" #> [4] \"png/age_heatmap.png\"  \"png/health_split.png\" \"png/health_stack.png\""},{"path":"https://ct-data-haven.github.io/stylehaven/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Camille Seaberry. Author, maintainer.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Seaberry C (2025). stylehaven: Quick style utilities guides. R package version 1.0.1, https://github.com/CT-Data-Haven/stylehaven.","code":"@Manual{,   title = {stylehaven: Quick style utilities and guides},   author = {Camille Seaberry},   year = {2025},   note = {R package version 1.0.1},   url = {https://github.com/CT-Data-Haven/stylehaven}, }"},{"path":"https://ct-data-haven.github.io/stylehaven/index.html","id":"stylehaven","dir":"","previous_headings":"","what":"Quick style utilities and guides","title":"Quick style utilities and guides","text":"collection style utilities mostly revolving around making clean labels legible plots examples building common plots, intended -house use DataHaven. ’s whole lot , probably never , just collection utilities, examples, best(?) practices related plotting. branches Nathan Kim’s (@18kimn) work developing first steps styleguide intern.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Quick style utilities and guides","text":"can install stylehaven GitHub: See vignettes examples.","code":"remotes::install_github(\"CT-Data-Haven/stylehaven\")"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/add_logo.html","id":null,"dir":"Reference","previous_headings":"","what":"Easily add a logo to a ggplot — add_logo","title":"Easily add a logo to a ggplot — add_logo","text":"function wraps around functions patchwork magick add logo (annotation) bottom ggplot plot, otherwise tedious easy forget process. meant flexible types objects can place; result, less flexible placement customization. specific needs, source function easy build upon. Previously used cowplot, package bit buggy.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/add_logo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Easily add a logo to a ggplot — add_logo","text":"","code":"add_logo(   plot,   image = NULL,   position = c(\"right\", \"left\"),   height = 0.05,   width = NULL,   place_inside = TRUE )"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/add_logo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Easily add a logo to a ggplot — add_logo","text":"plot ggplot object onto logo placed. image Either string giving path URL image file read magick::image_read; results reading file manipulating image already magick::image_read magick functions; ggplot object / grob; NULL, default. NULL, image come file system.file(\"extdata/logo.svg\", package = \"stylehaven\"). built, logo DataHaven, file can replaced repackaging library organizations projects. position String, either \"left\" \"right\", giving side logo aligned. Default: \"right\" height Numeric: height logo, percentage height image given plot. Adjust necessary based dimensions logo. Default: 0.05 width Numeric: width logo, percentage image given plot. NULL, default, width calculated based aspect ratio image. Must given explicitly ggplot objects, inherently dimensions. place_inside Logical: TRUE (default), logo drawn within plotting area; otherwise, additional grob built plot, meaning logo later cropped away, may undesirable.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/add_logo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Easily add a logo to a ggplot — add_logo","text":"ggplot object.","code":""},{"path":[]},{"path":"https://ct-data-haven.github.io/stylehaven/reference/add_logo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Easily add a logo to a ggplot — add_logo","text":"","code":"library(ggplot2) p <- ggplot(iris, ggplot2::aes(x = Sepal.Length)) +     geom_density() +     labs(title = \"Test chart\", caption = \"Source: 2019 ACS 5-year estimates\") +     theme(plot.caption = element_text(hjust = 0))  add_logo(p) #> Warning: ImageMagick was built without librsvg which causes poor qualty of SVG rendering. #> For better results use image_read_svg() which uses the rsvg package.  # this one is too tall--place it outside so it doesn't block axis add_logo(p,     magick::image_read(system.file(\"extdata/25th_logo.png\", package = \"stylehaven\")),     height = 0.1, place_inside = FALSE )   # This example logo is not all that attractive, but shows how you might # attach a ggplot grob as a dynamically-created logo dummy_data <- data.frame(     town = letters[1:4],     pop = c(21000, 40000, 81000, 36000) )  gg_logo <- ggplot(dummy_data, aes(x = town, y = pop)) +     geom_col(width = 0.8, fill = \"skyblue\") +     annotate(         geom = \"text\", label = \"DataHaven\", x = 0.6, y = 6e4, hjust = 0,         family = \"mono\", size = 5     ) +     theme_void()  add_logo(p, gg_logo, width = 0.2, height = 0.1)"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/age_lbls.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean up age group labels — age_lbls","title":"Clean up age group labels — age_lbls","text":"function tedious regex replacement make common labels use age groups (.e. syntactically correct variable names) labels meant display charts tables. main features replacing underscores numbers dashes, adding space text numbers, replacing symbols, parsing numbers. \"ages00_17\" becomes \"Ages 0-17\", \"ages65plus\" becomes \"Ages 65+\". course, also use numeric ranges, like years.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/age_lbls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean up age group labels — age_lbls","text":"","code":"age_lbls(x)"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/age_lbls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean up age group labels — age_lbls","text":"x string vector labels clean ","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/age_lbls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean up age group labels — age_lbls","text":"string vector display-worthy labels","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/age_lbls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean up age group labels — age_lbls","text":"","code":"a <- c(\"ages00_17\", \"ages18_64\", \"ages65plus\", \"under18\", \"ages18up\") age_lbls(a) #> [1] \"Ages 0-17\"  \"Ages 18-64\" \"Ages 65+\"   \"Under 18\"   \"Ages 18+\""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/align_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Create column alignment strings for knitr::kable — align_cols","title":"Create column alignment strings for knitr::kable — align_cols","text":"knitr::kable takes column alignments single string, \"llrrrr\" table 2 left-aligned columns followed 4 right-aligned ones. function quick utility creating strings programmatically number left- right-aligned columns, /calculating column counts fly. makes assumptions, left-aligned columns come first, right-aligned ones; common case developed , mileage may vary. 3 arguments (left, right, total), need supply 2.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/align_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create column alignment strings for knitr::kable — align_cols","text":"","code":"align_cols(l = NULL, r = NULL, total = NULL)"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/align_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create column alignment strings for knitr::kable — align_cols","text":"l Number left-aligned columns. Default: NULL r Number right-aligned columns. Default: NULL total Total number columns. Default: NULL","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/align_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create column alignment strings for knitr::kable — align_cols","text":"string can passed knitr::kable, function takes alignments format.","code":""},{"path":[]},{"path":"https://ct-data-haven.github.io/stylehaven/reference/align_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create column alignment strings for knitr::kable — align_cols","text":"","code":"# self_rated_health has 3 categorical columns and one numeric column, # so traditionally this would be formatted in a table with 3 left-aligned # columns and 1 right-aligned column. align_cols(l = 3, r = 1) #> [1] \"lllr\"  # I might also want to do this on the fly in a number of ways: align_cols(l = 3, total = ncol(self_rated_health)) #> [1] \"lllr\" # maybe a little risky if you don't know the data align_cols(     r = sum(sapply(self_rated_health, is.numeric)),     total = ncol(self_rated_health) ) #> [1] \"lllr\" # For programming this can be useful after reshaping n_responses <- length(levels(self_rated_health$response)) health_wide <- tidyr::pivot_wider(self_rated_health,     id_cols = group, names_from = response ) alignment <- align_cols(r = n_responses, total = ncol(health_wide)) if (require(\"knitr\")) {     knitr::kable(health_wide, align = alignment) } #> Loading required package: knitr #>  #>  #> |group       | Excellent| Very good| Good| Fair| Poor| #> |:-----------|---------:|---------:|----:|----:|----:| #> |Connecticut |      0.19|      0.34| 0.29| 0.14| 0.04| #> |Male        |      0.20|      0.34| 0.29| 0.13| 0.04| #> |Female      |      0.18|      0.34| 0.29| 0.16| 0.04| #> |Nonbinary   |      0.09|      0.20| 0.37| 0.22| 0.12|"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/clean_titles.html","id":null,"dir":"Reference","previous_headings":"","what":"Several options for formatting text into neater titles — clean_titles","title":"Several options for formatting text into neater titles — clean_titles","text":"function combines several ways titles names may need formatted. meant simple, yet flexible.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/clean_titles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Several options for formatting text into neater titles — clean_titles","text":"","code":"clean_titles(   x,   cap_all = FALSE,   split_case = TRUE,   keep_running_caps = TRUE,   space = \"_\",   remove = NULL )"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/clean_titles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Several options for formatting text into neater titles — clean_titles","text":"x character vector cap_all Logical: TRUE, first letter word splitting capitalized. FALSE, first character string capitalized. Note order balance respecting consecutive capital letters, acronyms, split_case Logical: TRUE, consecutive lowercase-uppercase pairs treated two words separated. keep_running_caps Logical: TRUE, consecutive uppercase letters kept uppercase. space Character vector characters /regex patterns replaced space separate words. remove Character vector characters /regex patterns removed operations; NULL, nothing removed.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/clean_titles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Several options for formatting text into neater titles — clean_titles","text":"character vector item newly formatted","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/clean_titles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Several options for formatting text into neater titles — clean_titles","text":"Examples possible common operations include: \"TownName\" –> \"Town Name\" \"town_name\" –> \"Town Name\" \"town_name\" –> \"Town name\" \"RegionABC\" –> \"Region ABC\" \"TOWN_NAME\" –> \"Town Name\"","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/clean_titles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Several options for formatting text into neater titles — clean_titles","text":"","code":"t1 <- c(\"GreaterNewHaven\", \"greater_new_haven\", \"GREATER_NEW_HAVEN\") clean_titles(t1, cap_all = TRUE, keep_running_caps = FALSE) #> [1] \"Greater New Haven\" \"Greater new haven\" \"Greater New Haven\"  t2 <- c(\"Male!CollegeGraduates\", \"Male CollegeGraduates\") clean_titles(t2, space = c(\"_\", \"!\")) #> [1] \"Male college graduates\" \"Male college graduates\"  t3 <- c(\"Greater BPT Men\", \"Greater BPT Men HBP\", \"GreaterBPT_men\", \"greaterBPT\") clean_titles(t3, cap_all = FALSE) #> [1] \"Greater BPT men\"     \"Greater BPT men HBP\" \"Greater BPT men\"     #> [4] \"Greater BPT\"          t4 <- c(     \"New Haven town, New Haven County, Connecticut\",     \"Newtown town, Fairfield County, Connecticut\" ) clean_titles(t4, cap_all = TRUE, remove = \" town,.+\") #> [1] \"New Haven\" \"Newtown\""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/contrast_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Choose label colors based on contrast — contrast_colors","title":"Choose label colors based on contrast — contrast_colors","text":"set utility functions classes situation often gloss : making chart different fill colors (stacked bars sequential palette), can good vary label color maintain good contrast background foreground. example, ColorBrewer palettes often go dark color light color black dark gray labels visible darkest bar, white light gray labels visible lightest bar. helps prepare testing contrast palette (presumably bar fill colors) light dark option (presumably label text bars). contrast ratio calculated colorspace::contrast_ratio according WCAG algorithm, minimum ratio defaults 4.5 based accessibility guidelines. verbose true combination palette color label colors fails meet minimum, get message letting know. example, using medium gray colors dark light labels likely lead situation neither dark light label color enough contrast palette. mutate_contrast takes step , working data frame determine label colors factor column (column can become factor). plot methods create ggplot plots visual references fill label colors. cc_df objects, two columns fill + label combinations ratios star label color greatest contrast. cc_vec objects, simplified version giving just one column fills label colors greatest contrast, ratio information.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/contrast_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choose label colors based on contrast — contrast_colors","text":"","code":"contrast_colors(   pal,   dark = \"black\",   light = \"white\",   n = 5,   min_ratio = 4.5,   verbose = TRUE,   labels_only = TRUE,   reverse = FALSE,   plot = FALSE )  mutate_contrast(   data,   col,   pal,   dark = \"black\",   light = \"white\",   min_ratio = 4.5,   verbose = TRUE,   reverse = FALSE )  # S3 method for class 'cc_df' plot(x, ...)  # S3 method for class 'cc_vec' plot(x, ...)  # S3 method for class 'cc_df' print(x, ...)  # S3 method for class 'cc_vec' print(x, ...)"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/contrast_colors.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Choose label colors based on contrast — contrast_colors","text":"https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/contrast_colors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Choose label colors based on contrast — contrast_colors","text":"pal String: either vector colors (either named R colors hex codes), name palette RColorBrewer, rcartocolor, viridisLite packages. name palette, respective function called fetch vector hex codes. dark String giving single valid color use dark label option, either named R color hex code. Default: 'black' light String giving single valid color use light label option, either named R color hex code. Default: 'white' n contrast_colors, pal name palette, corresponding palette n colors. Ignored otherwise. mutate_contrast, determined number levels col. Default: 5 min_ratio Minimum contrast ratio, pair colors deemed low-contrast. verbose true sets colors fail meet minimum, get diagnostic message letting know. Default: 4.5 verbose Logical, whether print diagnostic info issues contrast ratios, Default: TRUE labels_only Logical, whether return labels, .e. just vector dark light values, depending greatest contrast color pal, full data frame used calculations, including ratios. Default: TRUE reverse Boolean: TRUE, palette reversed. mostly matters mutate_contrast, determines colors associated factor levels. Default: FALSE plot Logical, whether print ggplot swatch tiles filled pal labels, using plot methods appropriate class. change return value. Default: FALSE data data frame col Bare name column x along palette mapped. already factor, coerced one levels order appear. x methods: object returned contrast_colors ... currently used","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/contrast_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Choose label colors based on contrast — contrast_colors","text":"contrast_colors: labels_only, named character vector colors, either value dark light, giving highest contrast ratio value pal. length pal (n, gave pal name palette retrieve), names fill colors. Otherwise, data frame number rows colors pal 6 columns info , including fill label colors (see examples). labels_only = FALSE, also classes contrast_colors cc_df labels_only = TRUE, also classes contrast_colors cc_vec. mutate_contrast, original data frame given data, columns added fill (according palette) label color.","code":""},{"path":[]},{"path":"https://ct-data-haven.github.io/stylehaven/reference/contrast_colors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Choose label colors based on contrast — contrast_colors","text":"","code":"# using a pre-defined palette qual_pal <- c(\"#009B9E\", \"#DAA51B\", \"#C75DAB\", \"#898DA7\", \"#2A39A7\") contrast_colors(qual_pal) #> #009B9E #DAA51B #C75DAB #898DA7 #2A39A7  #> \"black\" \"black\" \"black\" \"black\" \"white\"   # returning a data frame contrast_colors(qual_pal, labels_only = FALSE) #>      fill dark light  max lbl_color low_contrast #> 1 #009B9E 6.18  3.40 6.18     black        FALSE #> 2 #DAA51B 9.38  2.24 9.38     black        FALSE #> 3 #C75DAB 5.58  3.76 5.58     black        FALSE #> 4 #898DA7 6.43  3.27 6.43     black        FALSE #> 5 #2A39A7 2.24  9.37 9.37     white        FALSE  # printing the plot, brewer palette contrast_colors(\"YlGnBu\", plot = TRUE)  #> #FFFFCC #A1DAB4 #41B6C4 #2C7FB8 #253494  #> \"black\" \"black\" \"black\" \"black\" \"white\"   # not enough contrast, carto palette contrast_colors(\"Vivid\", n = 7, dark = \"gray40\", plot = TRUE) #> Warning: ! At least one set of colors failed to meet the minimum contrast threshold of #>   4.5. #> ℹ Consider adjusting the palette and/or using more distinct label colors. #> • For #E58606, color #1, ratio to `dark` is 2.12; ratio to `light` is 2.71. #> • For #52BCA3, color #3, ratio to `dark` is 2.48; ratio to `light` is 2.31. #> • For #99C945, color #4, ratio to `dark` is 2.95; ratio to `light` is 1.95. #> • For #CC61B0, color #5, ratio to `dark` is 1.61; ratio to `light` is 3.56. #> • For #A5AA99, color #7, ratio to `dark` is 2.41; ratio to `light` is 2.38.  #>  #E58606  #5D69B1  #52BCA3  #99C945  #CC61B0  #24796C  #A5AA99  #>  \"white\"  \"white\" \"gray40\" \"gray40\"  \"white\"  \"white\" \"gray40\"   # Use mutate_contrast to get color information attached to your data frame library(ggplot2)  health <- self_rated_health |>     mutate_contrast(col = response, pal = \"BuGn\")  # use same palette for fill scale # lbl_color column has colors to use, so can use identity scale ggplot(health, aes(x = group, y = value, fill = response)) +     geom_col(position = position_fill(reverse = TRUE)) +     geom_text(aes(label = percent100(value), group = group, color = lbl_color),         position = position_fill(reverse = TRUE, vjust = 0.5)     ) +     scale_fill_brewer(palette = \"BuGn\") +     scale_color_identity()   # could actually use scale_fill_identity as well, since fill colors are in data, # but it becomes messy when you want a legend  # now use a manual palette, and give the same set of colors to scale_fill_manual manual_pal <- c(\"#005CE7\", \"#9C45C7\", \"#CC6697\", \"#E69259\", \"#F2D25C\") health_w_pal <- self_rated_health |>     mutate_contrast(col = response, pal = manual_pal)  ggplot(health_w_pal, aes(x = group, y = value, fill = response)) +     geom_col(position = position_fill(reverse = TRUE)) +     geom_text(aes(label = percent100(value), group = group, color = lbl_color),         position = position_fill(reverse = TRUE, vjust = 0.5)     ) +     scale_fill_manual(values = manual_pal) +     scale_color_identity()"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/cws_trend.html","id":null,"dir":"Reference","previous_headings":"","what":"2015-2024 DCWS sample trends — cws_trend","title":"2015-2024 DCWS sample trends — cws_trend","text":"subset questions 2015 & 2024 DataHaven Community Wellbeing Surveys Greater New Haven.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/cws_trend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"2015-2024 DCWS sample trends — cws_trend","text":"","code":"cws_trend"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/cws_trend.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"2015-2024 DCWS sample trends — cws_trend","text":"data frame 36 rows 5 variables: question Indicator: local government responsive, police approval, parks good condition year Year, either 2015 2024 category Category: gender, age, etc. group Group: male, female, ages 18-34, etc. value Percentage value","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/cws_trend.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"2015-2024 DCWS sample trends — cws_trend","text":"2015 & 2024 DataHaven Community Wellbeing Survey","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/cws_trend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"2015-2024 DCWS sample trends — cws_trend","text":"","code":"head(cws_trend) #> # A tibble: 6 × 5 #>   question               year category group             value #>   <fct>                 <dbl> <fct>    <fct>             <dbl> #> 1 local_govt_responsive  2015 Total    Connecticut        0.49 #> 2 local_govt_responsive  2015 Total    Greater New Haven  0.47 #> 3 local_govt_responsive  2015 Age      Ages 18-34         0.42 #> 4 local_govt_responsive  2015 Age      Ages 35-49         0.4  #> 5 local_govt_responsive  2015 Age      Ages 50-64         0.52 #> 6 local_govt_responsive  2015 Age      Ages 65+           0.59"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/dodge_lbls.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare chart labels that should be repelled apart — dodge_lbls","title":"Prepare chart labels that should be repelled apart — dodge_lbls","text":"function designed plots, particularly dot plots, values close together need pushed apart order avoid overlaps. returns just columns needed know points dodged apart. calculate new positions points— depends specific use, ggrepel::geom_text_repel likely use . probably call get data frame points dodged, use dplyr::semi_join original data plot points need dodged, dplyr::anti_join ones need dodged (see example).","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/dodge_lbls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare chart labels that should be repelled apart — dodge_lbls","text":"","code":"dodge_lbls(data, x, value, group, thresh, digits = 2, verbose = FALSE)"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/dodge_lbls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare chart labels that should be repelled apart — dodge_lbls","text":"data data frame x Bare name column plotted independent axis value Bare name dependent variable group Bare column name grouping variable, likely used point color thresh Numeric: threshold value difference points. pair points difference less thresh considered close, included output points dodge. digits Number digits round calculating differences points. Default: 2 verbose Boolean: TRUE, report number observations dodged. Defaults FALSE.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/dodge_lbls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare chart labels that should be repelled apart — dodge_lbls","text":"data frame -close points, columns corresponding x group columns.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/dodge_lbls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare chart labels that should be repelled apart — dodge_lbls","text":"","code":"if (requireNamespace(\"ggrepel\", quietly = TRUE)) {     library(ggplot2)      cws24 <- cws_trend |>         dplyr::filter(year == 2024)      # some labels are overlapped & hard to read     ggplot(cws24, aes(x = value, y = question)) +         geom_point(aes(color = group), size = 6, alpha = 0.8) +         geom_text(aes(label = percent100(value)), size = 3)      to_dodge <- dodge_lbls(cws24,         x = question, value = value, group = group,         thresh = 0.01     )      # the first text geom will be observations that don't need to be dodged (anti-join)     # the second will be ones that do need to be dodged (semi-join)     ggplot(cws24, aes(x = value, y = question)) +         geom_point(aes(color = group), size = 6, alpha = 0.8) +         geom_text(aes(label = percent100(value)),             size = 2.7,             data = ~ dplyr::anti_join(., to_dodge, by = c(\"question\", \"group\"))         ) +         ggrepel::geom_text_repel(aes(label = percent100(value), color = group),             size = 2.7, seed = 1,             data = ~ dplyr::semi_join(., to_dodge, by = c(\"question\", \"group\")),             direction = \"x\", nudge_y = 0.2         ) }"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/endpoint_lbls.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatted labels for endpoints of trend charts — endpoint_lbls","title":"Formatted labels for endpoints of trend charts — endpoint_lbls","text":"Easily put together labels endpoints chart, line chart outwardly-justified labels end. Labels formats {name}: {fun(value)} (long format) {fun(value} (short format) created, \"Connecticut: 12%\" \"16%\" respectively. Often one format used one end format end, long_side gives options around . intention around combining labels like can put labels ends, aligned nicely, single geom_text call.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/endpoint_lbls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatted labels for endpoints of trend charts — endpoint_lbls","text":"","code":"endpoint_lbls(   data,   x,   value,   group,   mult = 0.05,   add = NULL,   fun = NULL,   long_side = c(\"right\", \"left\", \"both\", \"none\") )"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/endpoint_lbls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatted labels for endpoints of trend charts — endpoint_lbls","text":"data data frame x Bare column name independent value start finish points (probably date). numeric, endpoint_lbls try coerce numeric, may yield undesired results. value Bare column name value column group Bare column name name grouping variable shown labels. mult Numeric; ratio x variable labels offset. Default: 0.05. add Numeric; single value along x variable labels offset. Defaults NULL. mult add given, mult takes precedence. Previously frac argument supposed act like mult erroneously acted like add. fun function, used create value labels. scales::label_* functions useful . NULL (default), formatting done. long_side Character, either \"right\" (default), \"left\", \"\", \"none\". \"left\" \"right\", refers whether longer label right left, returning short label opposite side. \"\", long labels returned; \"none\", short labels returned. Regardless, labels combined new column called lbl.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/endpoint_lbls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formatted labels for endpoints of trend charts — endpoint_lbls","text":"data frame: original data frame passed data, 3 additional columns: x, x-values offsets added just, column 0 1 giving justification value dependent end label appear lbl, column formatted label text","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/endpoint_lbls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formatted labels for endpoints of trend charts — endpoint_lbls","text":"","code":"library(ggplot2) # note that it will still be up to your judgment to set scale expansion, # since that will depend on things outside the scope of just this function cws_trend |>     dplyr::filter(question == \"local_govt_responsive\", category == \"Age\") |>     endpoint_lbls(         value = value, x = year, group = group,         fun = percent100     ) |>     ggplot(aes(x = year, y = value, color = group)) +     geom_line() +     geom_point(size = 3) +     geom_text(aes(label = lbl, hjust = just, x = x)) +     scale_x_continuous(         expand = expansion(add = c(1, 3)),         breaks = c(2015, 2024)     ) +     theme(legend.position = \"none\")   cws_trend |>     dplyr::filter(question == \"local_govt_responsive\", category == \"Age\") |>     endpoint_lbls(         value = value, x = year, group = group, long_side = \"both\",         fun = percent100, add = 0.4, mult = NULL     ) |>     ggplot(aes(x = year, y = value, color = group)) +     geom_line() +     geom_point(size = 3) +     geom_text(aes(label = lbl, hjust = just, x = x)) +     scale_x_continuous(         expand = expansion(add = 3.5),         breaks = c(2015, 2024)     ) +     theme(legend.position = \"none\")"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/font_add_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Register a set of 4 font weights for use with showtext — font_add_weights","title":"Register a set of 4 font weights for use with showtext — font_add_weights","text":"Sometimes longer document lots charts, good limit much text bold instead make use semibold font faces. font_add_weights registers pair fonts Google Fonts. family, one typical set weights (default, regular = 400 bold = 700), bolder versions (default regular = 600, bold = 900). weight unavailable, nothing registered message print weights available font family.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/font_add_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register a set of 4 font weights for use with showtext — font_add_weights","text":"","code":"font_add_weights(name, regular = 400, semibold = 600, bold = 700, black = 900)"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/font_add_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register a set of 4 font weights for use with showtext — font_add_weights","text":"name Name font search Google Fonts. function register one family name, another family name appended \"Semibold.\" regular Numeric, defaults 400 semibold Numeric, defaults 600 bold Numeric, defaults 700 black Numeric, defaults 900","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/font_add_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Register a set of 4 font weights for use with showtext — font_add_weights","text":"Returns nothing, registers fonts sysfonts::font_add_google. Call sysfonts::font_families() confirm font family loaded.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/font_add_weights.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Register a set of 4 font weights for use with showtext — font_add_weights","text":"Font weights CSS styling, values multiples 100 100 900. defaults used norms used web typography. fonts available weights might like, many fonts Google well suited data visualization come many weights.","code":""},{"path":[]},{"path":"https://ct-data-haven.github.io/stylehaven/reference/font_add_weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register a set of 4 font weights for use with showtext — font_add_weights","text":"","code":"library(ggplot2) font_add_weights(\"Source Sans 3\", black = 800) #> ℹ Registering the following fonts: #> • Source Sans 3 with regular weight 400 and bold weight 700 #> • Source Sans 3 Semibold with semibold weight 600 and black weight 800 showtext::showtext_begin() showtext::showtext_opts(dpi = 150) ggplot(iris, aes(x = Sepal.Width)) +     geom_histogram(binwidth = 0.25) +     facet_wrap(vars(Species), nrow = 1) +     labs(         title = \"Font weights in use are 400, 600, and 700\",         subtitle = \"Sepal width by species\"     ) +     theme_gray(base_family = \"Source Sans 3\") +     theme(         plot.title = element_text(family = \"Source Sans 3\", face = \"bold\"), # 700         plot.subtitle = element_text(family = \"Source Sans 3 Semibold\"), # 600         strip.text = element_text(family = \"Source Sans 3 Semibold\")     ) # 600  showtext::showtext_end()"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/glue_here.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameterized, project-based file paths — glue_here","title":"Parameterized, project-based file paths — glue_here","text":"Quick wrapper around stringr::str_glue ::fill small recurring need: filling file paths based parameter, building relative project root.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/glue_here.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameterized, project-based file paths — glue_here","text":"","code":"glue_here(x, ..., .snake = TRUE, .envir = environment())"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/glue_here.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameterized, project-based file paths — glue_here","text":"x Character vector paths, relative project root, glue-style encodings. ... Additional named arguments fill glue brackets .snake Boolean, whether text also converted snakecase. Default: TRUE .envir Environment passed stringr::str_glue. Probably need worry .","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/glue_here.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parameterized, project-based file paths — glue_here","text":"character vector absolute paths glue strings filled .","code":""},{"path":[]},{"path":"https://ct-data-haven.github.io/stylehaven/reference/glue_here.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameterized, project-based file paths — glue_here","text":"","code":"glue_here(\"{year}_headings_{topic}.txt\", year = 2025, topic = \"education\") #> [1] \"/tmp/Rtmp8RzRiK/file206936beaedb/2025_headings_education.txt\"  # in a regular script you shouldn't need to worry about setting .envir # but scoping is weird for package examples # year <- 2025 # loc <- \"New Haven\" env <- rlang::env(year = 2025, loc = \"New Haven\") glue_here(c(     \"input_data/demo/{loc}_table_{year}.csv\",     \"{year}_headings.txt\" ), .envir = env) #> [1] \"/tmp/Rtmp8RzRiK/file206936beaedb/input_data/demo/new_haven_table_2025.csv\" #> [2] \"/tmp/Rtmp8RzRiK/file206936beaedb/2025_headings.txt\""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/life_exp.html","id":null,"dir":"Reference","previous_headings":"","what":"Life expectancy — life_exp","title":"Life expectancy — life_exp","text":"Dataset life expectancy years census tract within New Haven County 2010 2015.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/life_exp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Life expectancy — life_exp","text":"","code":"life_exp"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/life_exp.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Life expectancy — life_exp","text":"data frame 180 rows 2 variables: tract Tract FIPS code (note 2010 vintage tracts) value Life expectancy years","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/life_exp.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Life expectancy — life_exp","text":"CDC's USALEEP project","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/life_exp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Life expectancy — life_exp","text":"","code":"head(life_exp) #> # A tibble: 6 × 2 #>   tract       value #>   <chr>       <dbl> #> 1 09009120100  80.4 #> 2 09009120200  76.8 #> 3 09009125100  78.2 #> 4 09009125200  74.2 #> 5 09009125300  77.6 #> 6 09009125400  76.2"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/median_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Median age by sex — median_age","title":"Median age by sex — median_age","text":"sample data 2023 ACS, table B01002. Values median age Connecticut, Capitol Region Greater Bridgeport councils government (COGs), towns either COG, total population, males, females.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/median_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Median age by sex — median_age","text":"","code":"median_age"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/median_age.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Median age by sex — median_age","text":"data frame 141 rows 5 variables: level Geographic level: factor levels state, county, town county County: NA state- county- level observations, county name town-level observations name Name geography sex Sex: factor levels total, male, female value Median age","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/median_age.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Median age by sex — median_age","text":"2023 US Census Bureau American Community Survey 5-year estimates","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/median_age.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Median age by sex — median_age","text":"","code":"head(median_age) #> # A tibble: 6 × 5 #>   level  county name        sex    value #>   <fct>  <chr>  <chr>       <fct>  <dbl> #> 1 state  NA     Connecticut total   41.2 #> 2 state  NA     Connecticut male    39.8 #> 3 state  NA     Connecticut female  42.5 #> 4 county NA     Capitol COG total   40.2 #> 5 county NA     Capitol COG male    38.7 #> 6 county NA     Capitol COG female  41.7"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/number_formats.html","id":null,"dir":"Reference","previous_headings":"","what":"Number formatting utilities — round100","title":"Number formatting utilities — round100","text":"collection small utilities formatting numbers, especially use charts tables. Many simply wrappers around scales functions.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/number_formats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number formatting utilities — round100","text":"","code":"round100(x, ...)  comma(x, ...)  percent100(x, ...)  percent_lt1(x, ...)  percent_txt(x, accuracy = 1, ...)  percent_eng(x, accuracy = 1, sentence_case = TRUE)  dollark(x, accuracy = 1, ...)  dollar1(x, ...)"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/number_formats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number formatting utilities — round100","text":"x numeric vector ... Additional arguments pass underlying scales functions, scales::label_percent scales::label_number. accuracy number round . Use (e.g.) 0.01 show 2 decimal places precision. NULL, default, uses heuristic ensure breaks minimum number digits needed show difference adjacent values. Applied rescaled data. sentence_case Boolean: TRUE (default), text also converted sentence case, .e. capitalizing first letter","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/number_formats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number formatting utilities — round100","text":"string vector formatted numbers.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/number_formats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Number formatting utilities — round100","text":"round100 takes decimal, percentage, multiplies 100, rounds, e.g. 0.251 becomes \"25\", useful pasting additional text (see examples). percent100 adds round100 appending percent sign, e.g. 0.251 becomes \"25%\". percent_lt1 takes additional step, replacing values 1 percent \"<1%\", useful suppressing small numbers.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/number_formats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number formatting utilities — round100","text":"","code":"paste(\"The value is\", percent_txt(0.25)) #> [1] \"The value is 25 percent\"  percent100(c(0.25, 0.251, 0.008)) #> [1] \"25%\" \"25%\" \"1%\"   percent_lt1(c(0.25, 0.251, 0.008)) #> [1] \"25%\" \"25%\" \"<1%\"  paste(percent_eng(0.1), \"of adults say...\") #> [1] \"Ten percent of adults say...\"  dollar1(c(81.1, 105.22)) #> [1] \"$81\"  \"$105\"  dollark(c(12345, 89100)) #> [1] \"$12k\" \"$89k\" dollark(c(12345, 89100), accuracy = 0.1) #> [1] \"$12.3k\" \"$89.1k\""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/number_thresh.html","id":null,"dir":"Reference","previous_headings":"","what":"Format and top- or bottom-code numbers based on a threshold — number_thresh","title":"Format and top- or bottom-code numbers based on a threshold — number_thresh","text":"set helper functions formatting numbers also need top-code bottom-code values threshold (). Additional arguments help generating plain English text escaped HTML characters printing tables.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/number_thresh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format and top- or bottom-code numbers based on a threshold — number_thresh","text":"","code":"number_thresh(   x,   thresh,   less_than = TRUE,   accuracy = 1,   txt = FALSE,   html = FALSE,   ... )  percent_thresh(   x,   thresh,   less_than = TRUE,   accuracy = 1,   txt = FALSE,   html = FALSE,   ... )  dollar_thresh(   x,   thresh,   less_than = TRUE,   accuracy = 1,   txt = FALSE,   html = FALSE,   ... )"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/number_thresh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format and top- or bottom-code numbers based on a threshold — number_thresh","text":"x Numeric vector thresh Numeric, threshold /numbers capped. less_than Boolean: TRUE, values less threshold lumped together. Otherwise, values greater threshold lumped. Ignored bottom top endpoints given thresh. Default: TRUE accuracy Number: accuracy formatted numbers, passed scales::label_number related functions. Defaults 1, meaning decimal places returned. txt Boolean: TRUE, plain English used (e.g. \"less \") instead symbols (e.g. \"<\"). percent_thresh, also means using \" percent\" instead \"%\". Default: FALSE html Boolean: TRUE, HTML-appropriate symbols used (e.g. &lt;) instead readable ones (e.g. \"<\"). effect txt = TRUE. Default: FALSE function ... Arguments passed scales::label_number scale scaling factor: x multiplied scale formatting. useful underlying data small large. prefix Additional text display number. suffix applied absolute value style_positive style_negative processed prefix = \"$\" yield (e.g.) -$1 ($1). suffix Additional text display number. big.mark Character used every 3 digits separate thousands. default (NULL) retrieves setting number options. decimal.mark character used indicate numeric decimal point.  default (NULL) retrieves setting number options. style_positive string determines style positive numbers: \"none\" (default): change, e.g. 1. \"plus\": preceded +, e.g. +1. \"space\": preceded Unicode \"figure space\", .e., space equally wide number +. Compared \"none\", adding figure space can ensure numbers remain properly aligned left- right-justified. default (NULL) retrieves setting number options. style_negative string determines style negative numbers: \"hyphen\" (default): preceded standard hyphen -, e.g. -1. \"minus\", uses proper Unicode minus symbol. typographical nicety ensures - aligns horizontal bar horizontal bar +. \"parens\", wrapped parentheses, e.g. (1). default (NULL) retrieves setting number options. scale_cut Named numeric vector allows rescale large (small) numbers add prefix. Built-helpers include: cut_short_scale(): [10^3, 10^6) = K, [10^6, 10^9) = M, [10^9, 10^12) = B, [10^12, Inf) = T. cut_long_scale(): [10^3, 10^6) = K, [10^6, 10^12) = M, [10^12, 10^18) = B, [10^18, Inf) = T. cut_si(unit): uses standard SI units. supply vector c(= 100, b = 1000), absolute values range [0, 100) rescaled, absolute values range [100, 1000) divided 100 given suffix \"\", absolute values range [1000, Inf) divided 1000 given suffix \"b\". division creates irrational value (one many digits), cut value tried see improves look final label. trim Logical, FALSE, values right-justified common width (see base::format()).","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/number_thresh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format and top- or bottom-code numbers based on a threshold — number_thresh","text":"character vector length x","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/number_thresh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format and top- or bottom-code numbers based on a threshold — number_thresh","text":"","code":"rate <- c(0.9, 0.95, 0.92, 0.991) percent_thresh(rate, thresh = 0.99, less_than = FALSE) #> [1] \"90%\"  \"95%\"  \"92%\"  \">99%\" percent_thresh(rate, thresh = 0.99, less_than = FALSE, txt = TRUE) #> [1] \"90 percent\"           \"95 percent\"           \"92 percent\"           #> [4] \"more than 99 percent\"  # censor amounts under 100 dollars or above 1000 dollars money <- c(200, 99, 400, 1005, 999) dollar_thresh(money, thresh = c(100, 1000)) #> [1] \"$200\"    \"<$100\"   \"$400\"    \">$1,000\" \"$999\""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/offset_lbls.html","id":null,"dir":"Reference","previous_headings":"","what":"Offset bar chart labels without hard-coding — offset_lbls","title":"Offset bar chart labels without hard-coding — offset_lbls","text":"Sometimes add direct labels bar chart, can annoying hard-code value offset labels add padding end bar, e.g. using nudge_y. also problem different scales different facets, batch generating charts know exactly scale . ratio_to_max finds maximum value vector, returns fraction specify. offset_lbls adds columns data parameters adjusting labels, uses ratio_to_max hood. Values offset proportionate maximum value dataset. also handles situations bars small fit labels properly inside bar.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/offset_lbls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Offset bar chart labels without hard-coding — offset_lbls","text":"","code":"offset_lbls(   data,   value,   frac = 0.05,   thresh = 0.15,   margin = 1.5,   fun = NULL,   na = \"N/A\" )  ratio_to_max(x, frac = 0.05)"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/offset_lbls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Offset bar chart labels without hard-coding — offset_lbls","text":"data data frame value Bare name column use frac Numeric, desired fraction maximum value offset. Default: 0.05 thresh Numeric threshold ratio values considered small fit inside bars. Default: 0.15 margin Numeric scaling factor positioning small values / right bars. Default: 1.5 fun function, used create value labels. scales::label_* functions useful . NULL (default), formatting done. na string use replace NA values. Default: \"N/\". NULL, print \"NA\". x numeric vector","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/offset_lbls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Offset bar chart labels without hard-coding — offset_lbls","text":"ratio_to_max, single number giving frac * max(x). offset_lbls, data frame number rows data additional 5 columns.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/offset_lbls.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Offset bar chart labels without hard-coding — offset_lbls","text":"offset_lbls makes decisions might want place labels tries force choices . first thing calculated baseline offset, ratio_to_max. value, ratio maximum value. ratio less thresh, value considered \"small\". non-small values, y position calculated subtracting baseline offset value; small values, y position value plus baseline times margin. Additionally, can set text justifications differently small non-small values set alignment labels bar. good mess around frac thresh suit chart. find horizontal bars might need smaller values frac /larger values thresh. columns returned data frame : is_small: Logical: value considered small respect maximum value threshold. useful white labels inside bars, need black gray text labels fall outside bars. : Numeric: number y-positions offset, positive small values negative non-small values value_off: Numeric: value positions place labels. NA values replaced 0. Used called y, changing match ggplot's move away coord_flip. just: Numeric, either 0 1 use horizontal vertical justification e.g. ggplot2::geom_text. lbl: Character: values formatted function fun, NA values replaced per na argument.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/offset_lbls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Offset bar chart labels without hard-coding — offset_lbls","text":"","code":"library(ggplot2) # shares of people rating health as poor is too small for most groups to have # easily legible label, so offset them to the right of their bars self_rated_health |>     offset_lbls(value = value, fun = percent100) |>     ggplot(aes(x = value, y = forcats::fct_rev(group), fill = response)) +     geom_col() +     geom_text(aes(x = value_off, hjust = just, label = lbl, color = is_small)) +     facet_grid(cols = vars(response)) +     scale_x_barcontinuous(breaks = NULL) +     scale_color_manual(values = c(\"TRUE\" = \"gray30\", \"FALSE\" = \"white\")) +     theme(legend.position = \"none\")"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/palx.html","id":null,"dir":"Reference","previous_headings":"","what":"Make multi-hue, multi-shade qualitative color palettes — palx","title":"Make multi-hue, multi-shade qualitative color palettes — palx","text":"palx based Palx javascript library, basically port core functions using colorspace package. Provided base color, pulls set hues across spectrum lightness saturation, plus gray color. creates shades hues nearly black nearly white. probably actually want every hue; just good way get bunch colors choose . can view palette graphically running plot(my_palx), setting plot = TRUE; former returns ggplot object can use , latter just prints plot . creates grid hue vs. shade tiles. generating palette need extract different hues different shades , make small palette set charts, find getting list (return_df = FALSE) versatile.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/palx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make multi-hue, multi-shade qualitative color palettes — palx","text":"","code":"palx(   color,   n_hues = 8,   n_shades = 6,   row = NULL,   return_df = FALSE,   plot = FALSE,   labels = FALSE )  # S3 method for class 'palx' as_tibble(x, ...)  # S3 method for class 'palx' plot(x, ..., labels = FALSE)"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/palx.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Make multi-hue, multi-shade qualitative color palettes — palx","text":"https://github.com/jxnblk/palx","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/palx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make multi-hue, multi-shade qualitative color palettes — palx","text":"color string color name (\"red\") hex code (\"#6f54d6\").' single value, color palette based around, though guaranteed exact color final palette. n_hues number 1 12. number hues returned + 1, gray color added. n_shades number, number shades return hue. Defaults 6; many probably become hard distinguish. row Numeric. NULL, default, rows (shades) returned. Otherwise, rows indices returned. Just shortcut subsetting list. return_df Logical, whether return data frame (return_df = TRUE) list character vectors. Defaults FALSE. plot Logical, whether call plot_palx returning. change function returns, just prints ggplot chart returns colors normal. Defaults FALSE. labels Logical, whether add labels tile giving colors' hex codes. Defaults FALSE. x as_tibble plot methods: output calling palx, either list data frame ... currently implemented","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/palx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make multi-hue, multi-shade qualitative color palettes — palx","text":"return_df = TRUE, tibble n_shades rows one column per hue, plus column giving shade number. Otherwise, named list (length n_shades) character vectors, list item represents one shade. tibble named list extended \"palx\" class, users can conveniently run plot(my_palx) as_tibble(my_palx).","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/palx.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make multi-hue, multi-shade qualitative color palettes — palx","text":"notes color: Hue refers commonly general name color, e.g. blue yellow. Shade refers light dark color , e.g. light blue, dark blue. Saturation refers strength color, distance neutral gray. color spectrum broken even chunks, set wavelengths appear pretty similar–shows lime-green-teal-cyan-blue colors. just human eyeballs work guess. palettes used sequential palettes, even pulling multiple shades one hue. Good sequential palettes corrected perceptual differences shade, whereas just takes even steps. Also please use rainbow scales sequential data. likely want one two shades worth colors (use row arguments), either adjacent colors appear \"even\", one light one dark paired palette. Saturated colors dark light work best.","code":""},{"path":[]},{"path":"https://ct-data-haven.github.io/stylehaven/reference/palx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make multi-hue, multi-shade qualitative color palettes — palx","text":"","code":"palette <- palx(\"#9CCC0C\") # returns a list palx(\"#9CCC0C\", return_df = TRUE) # returns a data frame #> # A tibble: 6 × 10 #>   shade fuschia red     orange  yellow  green   teal    blue    indigo  gray    #>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #> 1     1 #290221 #290202 #291602 #1E2902 #022905 #022923 #021029 #130229 #171813 #> 2     2 #6E0658 #6E0606 #6E3A06 #506E06 #066E0E #066E60 #062C6E #33066E #3E4233 #> 3     3 #B40B8F #B40B0B #B45F0B #83B40B #0BB417 #0BB49C #0B47B4 #530BB4 #656B54 #> 4     4 #F226C7 #F22626 #F28C26 #B8F226 #26F235 #26F2D6 #2670F2 #7D26F2 #949B7F #> 5     5 #F885DF #F88585 #F8BE85 #D7F885 #85F88D #85F8E8 #85AEF8 #B685F8 #C2C7B7 #> 6     6 #FDE3F8 #FDE3E3 #FDF0E3 #F6FDE3 #E3FDE5 #E3FDFA #E3EDFD #EEE3FD #F1F2EF  # convert `palette` to a tibble tibble::as_tibble(palette) #> # A tibble: 6 × 10 #>   shade fuschia red     orange  yellow  green   teal    blue    indigo  gray    #>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #> 1     1 #290221 #290202 #291602 #1E2902 #022905 #022923 #021029 #130229 #171813 #> 2     2 #6E0658 #6E0606 #6E3A06 #506E06 #066E0E #066E60 #062C6E #33066E #3E4233 #> 3     3 #B40B8F #B40B0B #B45F0B #83B40B #0BB417 #0BB49C #0B47B4 #530BB4 #656B54 #> 4     4 #F226C7 #F22626 #F28C26 #B8F226 #26F235 #26F2D6 #2670F2 #7D26F2 #949B7F #> 5     5 #F885DF #F88585 #F8BE85 #D7F885 #85F88D #85F8E8 #85AEF8 #B685F8 #C2C7B7 #> 6     6 #FDE3F8 #FDE3E3 #FDF0E3 #F6FDE3 #E3FDE5 #E3FDFA #E3EDFD #EEE3FD #F1F2EF # should yield a tibble with the additional class `palx` class(tibble::as_tibble(palette)) #> [1] \"palx\"       \"tbl_df\"     \"tbl\"        \"data.frame\"  # plot `palette` using ggplot plot(palette)   # bad examples all with one hue that return weird / not very useful palettes too_light <- palx(\"#ccf4fa\", plot = TRUE) # saturated but too light  low_sat <- palx(\"#6c888d\", plot = TRUE) # not too light, but not saturated enough  good <- palx(\"#0e91a7\", plot = TRUE) # much better--high saturation, middle lightness"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/round_sum100.html","id":null,"dir":"Reference","previous_headings":"","what":"Round a set of numbers so they'll add up to 100 — round_sum100","title":"Round a set of numbers so they'll add up to 100 — round_sum100","text":"function takes vector numbers rounds coerce add 100. works best numbers several decimal places close adding 100. definitely fool-proof, can help situations like waffle charts previous rounding may make numbers add exactly 100.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/round_sum100.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round a set of numbers so they'll add up to 100 — round_sum100","text":"","code":"round_sum100(x, digits = 0, verbose = FALSE)"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/round_sum100.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round a set of numbers so they'll add up to 100 — round_sum100","text":"x numeric vector digits Number digits use rounding; probably need change . Default: 0 verbose Logical; TRUE, print sum, letting confirm whether numbers indeed add 100. Defaults FALSE.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/round_sum100.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Round a set of numbers so they'll add up to 100 — round_sum100","text":"numeric vector hopefully adds 100.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/round_sum100.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Round a set of numbers so they'll add up to 100 — round_sum100","text":"","code":"round_sum100(c(9.2124, 40.292, 50.2), 0) # yay #> [1]  9 41 50 round_sum100(c(0.24, 0.61, 0.15) * 100) # yay #> [1] 24 61 15 round_sum100(c(0.24, 0.6, 0.15) * 100) # sad #> [1] 24 60 15"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/scaffold_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup directories for a typical DataHaven project — scaffold_project","title":"Setup directories for a typical DataHaven project — scaffold_project","text":"sets typical (opinionated) project directory structure use many projects DataHaven. write directories specified path, overwrite directories already exist. option cancel anything written.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/scaffold_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup directories for a typical DataHaven project — scaffold_project","text":"","code":"scaffold_project(   dir = \".\",   input_data = TRUE,   output_data = TRUE,   fetch_data = TRUE,   analysis = TRUE,   prep_scripts = FALSE,   plots = FALSE,   format_tables = FALSE,   drafts = FALSE,   utils = TRUE,   addl = NULL,   gitblank = TRUE,   dryrun = FALSE )"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/scaffold_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup directories for a typical DataHaven project — scaffold_project","text":"dir String: path directory new files written. Default: '.' input_data Create directory input_data. Default: TRUE. Standard use: data outside source analyzed project. output_data Create directory output_data. Default: TRUE. Standard use: data written analysis done project, generally formats can still used analysis visualization (csv, rds) rather formats distribution (usually add folder to_distro) pass client (xlsx). Nice spreadsheet outputs go format_tables distribution-centered folder. fetch_data Create directory fetch_data. Default: TRUE. Standard use: place dump data comes API calls, queries, batch file downloads, etc. analysis Create directory analysis. Default: TRUE Standard use: main analysis scripts, notebooks .R scripts. prep_scripts Create directory prep_scripts. Default: FALSE Standard use: scripts use prep reshape data documents, e.g. creating formatted spreadsheets client, making metadata, prepping post data.world, formatting website, bulk rendering parameterized Rmarkdown documents. plots Create directory plots. Default: FALSE Standard use: plots, either -house use outside distribution. format_tables Create directory format_tables. Default: FALSE Standard use: spreadsheets–probably written script prep_scripts–shared clients collaborators. Think files appropriate presentation addenda report, analysis. drafts Create directory drafts. Default: FALSE Standard use: separating EDA-centered notebooks notebooks used drafting writing. Also good place keep files edited outside software (.docx, etc). utils Create directory utils. Default: TRUE Standard use: utility scripts miscellaneous files, e.g. logo images, snippets data, lists colors use. addl string vector additional directories create. Default: NULL gitblank Logical: whether write blank placeholder file new directory force git tracking, even without yet folder contents. Default: TRUE. FALSE, empty directories tracked git. dryrun Logical: whether just dry run without actually writing directories files. Defaults FALSE.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/scaffold_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup directories for a typical DataHaven project — scaffold_project","text":"Returns nothing, prints paths newly created directories.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/scaffold_project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setup directories for a typical DataHaven project — scaffold_project","text":"","code":"# create default folders--good for small analysis projects scaffold_project(dryrun = TRUE) #> ℹ Note that this is just a dry run. You'll see the normal printouts but no files will actually be written. #> ℹ The following new directories will be created: #> • _utils #> • analysis #> • fetch_data #> • input_data #> • output_data #> ──────────────────────────────────────────────────────────────────────────────── #> → Writing ./_utils #> → Writing ./analysis #> → Writing ./fetch_data #> → Writing ./input_data #> → Writing ./output_data  # create all available folders--good for larger print projects scaffold_project(     prep_scripts = TRUE,     plots = TRUE,     format_tables = TRUE,     drafts = TRUE,     dryrun = TRUE ) #> ℹ Note that this is just a dry run. You'll see the normal printouts but no files will actually be written. #> ℹ The following new directories will be created: #> • _utils #> • analysis #> • drafts #> • fetch_data #> • format_tables #> • input_data #> • output_data #> • plots #> • prep_scripts #> ──────────────────────────────────────────────────────────────────────────────── #> → Writing ./_utils #> → Writing ./analysis #> → Writing ./drafts #> → Writing ./fetch_data #> → Writing ./format_tables #> → Writing ./input_data #> → Writing ./output_data #> → Writing ./plots #> → Writing ./prep_scripts"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/scale_barcontinuous.html","id":null,"dir":"Reference","previous_headings":"","what":"Set a continuous scale more suited to bar charts — scale_y_barcontinuous","title":"Set a continuous scale more suited to bar charts — scale_y_barcontinuous","text":"light wrapper around ggplot2::scale_x_continuous / ggplot2::scale_y_continuous sets expand argument mult = c(0, 0.05). purpose just align bases bars x-axis (scale_y_continuous) y-axis (scale_x_continuous), rather default leaves gap bars x- y-axis.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/scale_barcontinuous.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set a continuous scale more suited to bar charts — scale_y_barcontinuous","text":"","code":"scale_y_barcontinuous(top = 0.05, ...)  scale_x_barcontinuous(top = 0.05, ...)"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/scale_barcontinuous.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set a continuous scale more suited to bar charts — scale_y_barcontinuous","text":"top Numeric, giving ratio set upper padding. Defaults 0.05, case underlying ggplot2::scale_x/y_continuous. ... Additional arguments passed ggplot2::scale_x/y_continuous.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/scale_barcontinuous.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set a continuous scale more suited to bar charts — scale_y_barcontinuous","text":"","code":"library(ggplot2)  local_govt <- cws_trend |>    dplyr::filter(year == 2024, question == \"local_govt_responsive\")  # default expansion leaves an awkward gap below 0-aligned bars p <- ggplot(local_govt, aes(x = group, y = value)) +   geom_col() +   scale_x_discrete(labels = scales::label_wrap(10))  p   # scale_y_barcontinuous changes expansion to remove it p +   scale_y_barcontinuous()"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/self_rated_health.html","id":null,"dir":"Reference","previous_headings":"","what":"2024 DCWS sample: self-rated health — self_rated_health","title":"2024 DCWS sample: self-rated health — self_rated_health","text":"question statewide 2024 DataHaven Community Wellbeing Survey data self-rated health. includes response categories (excellent, good, good, fair, poor) Connecticut adults gender.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/self_rated_health.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"2024 DCWS sample: self-rated health — self_rated_health","text":"","code":"self_rated_health"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/self_rated_health.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"2024 DCWS sample: self-rated health — self_rated_health","text":"data frame 20 rows 4 variables: category Category: gender, age, etc. group Group: male, female, ages 18-34, etc. response Response value Percentage value","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/self_rated_health.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"2024 DCWS sample: self-rated health — self_rated_health","text":"2024 DataHaven Community Wellbeing Survey","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/self_rated_health.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"2024 DCWS sample: self-rated health — self_rated_health","text":"","code":"head(self_rated_health) #> # A tibble: 6 × 4 #>   category group       response  value #>   <fct>    <fct>       <fct>     <dbl> #> 1 Total    Connecticut Excellent  0.19 #> 2 Total    Connecticut Very good  0.34 #> 3 Total    Connecticut Good       0.29 #> 4 Total    Connecticut Fair       0.14 #> 5 Total    Connecticut Poor       0.04 #> 6 Gender   Male        Excellent  0.2"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/stack_lbls.html","id":null,"dir":"Reference","previous_headings":"","what":"Stack labels cumulatively — stack_lbls","title":"Stack labels cumulatively — stack_lbls","text":"small utility function, intended calculate position labels stacked bar charts. Usually ggplot, position_stack position_fill suffice, sometimes need calculations manually specific label placement. common labels placed middle segment, just option allows labels aligned ratio along length segment. Note function concerned numeric values. likely want arrange / group data passing values stack_lbls.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/stack_lbls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stack labels cumulatively — stack_lbls","text":"","code":"stack_lbls(x, just = 0.5, fill = FALSE)"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/stack_lbls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stack labels cumulatively — stack_lbls","text":"x Numeric vector stack just Numeric value representing ratio place labels, comparable hjust vjust arguments plotting functions. often want single value, though setting segment's justification can also useful. Logically values 0 1, nothing's stopping using values outside range. Defaults 0.5 centered values. fill Logical: stacked values rescaled range 0 1? Defaults FALSE, returning values scale supplied.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/stack_lbls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stack labels cumulatively — stack_lbls","text":"vector stacked values length x. length x multiple length just, get warnings.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/stack_lbls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stack labels cumulatively — stack_lbls","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(ggplot2) df <- self_rated_health |>     arrange(category, group, desc(response)) |>     group_by(group) # place labels at centers of bars--should be the same as just using position_stack df_center <- df |>     mutate(centered = stack_lbls(value)) ggplot(df_center, aes(x = group, y = value, fill = response)) +     geom_col() +     geom_text(aes(label = percent100(value), y = centered))   # replace the legend with direct labels along the last stack of bars df_top <- df |>     mutate(top = stack_lbls(value, just = 1)) |>     ungroup() ggplot(df_top, aes(x = group, y = value, fill = response)) +     geom_col() +     geom_text(aes(label = response, color = response, y = top),         data = ~ slice_max(., group),         hjust = 0, vjust = 1, nudge_x = 0.5     ) +     scale_x_discrete(expand = expansion(add = c(0.8, 1.5))) +     theme(legend.position = \"none\")"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/stdev_brks.html","id":null,"dir":"Reference","previous_headings":"","what":"Create labeled intervals based on standard deviations — stdev_brks","title":"Create labeled intervals based on standard deviations — stdev_brks","text":"Occasionally make charts using standard deviations away average value fill bars geographies—hard task, tedious. function takes data frame, gets midpoint value, either calculating mean filtering observation already data frame (statewide value). calculates z-scores based midpoint standard deviation, cuts z-scores based brks. Pay close attention argument , allows calculations grouped column; useful data frame several different indicators. Alternatively, passing grouped data frame also calculations group.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/stdev_brks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create labeled intervals based on standard deviations — stdev_brks","text":"","code":"stdev_brks(   x,   value = value,   filters = NULL,   by = NULL,   brks = c(-2, -1/2, 1/2, 2),   labels = NULL,   na.rm = TRUE,   keep_calcs = TRUE,   ... )"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/stdev_brks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create labeled intervals based on standard deviations — stdev_brks","text":"x data frame tibble value Bare name numeric value column, Default: value filters optional named list values use filtering. given, observation matching values used midpoint. NULL (default), midpoint calculated mean values, grouped x's grouping columns () arguments (also ). item list vector length 1. Optional character vector. given, used group within intervals calculated. Default: NULL brks Numeric vector break points cutting z-scores. vector, plus -Inf Inf, passed base::cut's breaks argument. Default: c(-2, -1/2, 1/2, 2) labels Character vector labels resulting factor. NULL, levels base::cut's interval notation. length vector one length brks. Default: NULL na.rm Boolean passed mean midpoints calculated. Default: TRUE keep_calcs Boolean, whether keep columns calculations. Default: TRUE ... Additional arguments passed base::cut","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/stdev_brks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create labeled intervals based on standard deviations — stdev_brks","text":"data frame tibble number rows x. keep_calcs true, returned data frame numeric columns added midpoint (midpt), standard deviation (sd), z-score (z), factor column resulting intervals (brk). false, column added intervals.","code":""},{"path":[]},{"path":"https://ct-data-haven.github.io/stylehaven/reference/stdev_brks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create labeled intervals based on standard deviations — stdev_brks","text":"","code":"# Calculate intervals along the full dataset, based on calculated mean stdev_brks(median_age,     labels = c(\"Lower\", \"Somewhat lower\", \"Average\", \"Somewhat higher\", \"Higher\") ) #> # A tibble: 141 × 9 #>    level  county      name                 sex   value midpt    sd       z brk   #>    <fct>  <chr>       <chr>                <fct> <dbl> <dbl> <dbl>   <dbl> <fct> #>  1 state  NA          Connecticut          total  41.2  42.4  5.14 -0.242  Aver… #>  2 state  NA          Connecticut          male   39.8  42.4  5.14 -0.515  Some… #>  3 state  NA          Connecticut          fema…  42.5  42.4  5.14  0.0103 Aver… #>  4 county NA          Capitol COG          total  40.2  42.4  5.14 -0.437  Aver… #>  5 county NA          Capitol COG          male   38.7  42.4  5.14 -0.728  Some… #>  6 county NA          Capitol COG          fema…  41.7  42.4  5.14 -0.145  Aver… #>  7 county NA          Greater Bridgeport … total  40    42.4  5.14 -0.476  Aver… #>  8 county NA          Greater Bridgeport … male   39    42.4  5.14 -0.670  Some… #>  9 county NA          Greater Bridgeport … fema…  41.2  42.4  5.14 -0.242  Aver… #> 10 town   Capitol COG Andover              total  52.1  42.4  5.14  1.88   Some… #> # ℹ 131 more rows  # That might be a little biased because there are also observations for state & counties. # Calculate intervals for each of the three indicators in the `question` column. # Both examples have the same result: median_age |>     stdev_brks(filters = list(level = \"state\"), by = \"sex\") # or list(name = \"Connecticut\") #> # A tibble: 141 × 9 #>    level  county      name                  sex   value midpt    sd      z brk   #>    <fct>  <chr>       <chr>                 <fct> <dbl> <dbl> <dbl>  <dbl> <fct> #>  1 state  NA          Connecticut           total  41.2  41.2  4.96  0     (-0.… #>  2 state  NA          Connecticut           male   39.8  39.8  4.97  0     (-0.… #>  3 state  NA          Connecticut           fema…  42.5  42.5  5.44  0     (-0.… #>  4 county NA          Capitol COG           total  40.2  41.2  4.96 -0.202 (-0.… #>  5 county NA          Capitol COG           male   38.7  39.8  4.97 -0.221 (-0.… #>  6 county NA          Capitol COG           fema…  41.7  42.5  5.44 -0.147 (-0.… #>  7 county NA          Greater Bridgeport C… total  40    41.2  4.96 -0.242 (-0.… #>  8 county NA          Greater Bridgeport C… male   39    39.8  4.97 -0.161 (-0.… #>  9 county NA          Greater Bridgeport C… fema…  41.2  42.5  5.44 -0.239 (-0.… #> 10 town   Capitol COG Andover               total  52.1  41.2  4.96  2.20  (2, … #> # ℹ 131 more rows  median_age |>     dplyr::group_by(sex) |>     stdev_brks(filters = list(level = \"state\")) #> # A tibble: 141 × 9 #> # Groups:   sex [3] #>    level  county      name                  sex   value midpt    sd      z brk   #>    <fct>  <chr>       <chr>                 <fct> <dbl> <dbl> <dbl>  <dbl> <fct> #>  1 state  NA          Connecticut           total  41.2  41.2  4.96  0     (-0.… #>  2 state  NA          Connecticut           male   39.8  39.8  4.97  0     (-0.… #>  3 state  NA          Connecticut           fema…  42.5  42.5  5.44  0     (-0.… #>  4 county NA          Capitol COG           total  40.2  41.2  4.96 -0.202 (-0.… #>  5 county NA          Capitol COG           male   38.7  39.8  4.97 -0.221 (-0.… #>  6 county NA          Capitol COG           fema…  41.7  42.5  5.44 -0.147 (-0.… #>  7 county NA          Greater Bridgeport C… total  40    41.2  4.96 -0.242 (-0.… #>  8 county NA          Greater Bridgeport C… male   39    39.8  4.97 -0.161 (-0.… #>  9 county NA          Greater Bridgeport C… fema…  41.2  42.5  5.44 -0.239 (-0.… #> 10 town   Capitol COG Andover               total  52.1  41.2  4.96  2.20  (2, … #> # ℹ 131 more rows"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/stylehaven-package.html","id":null,"dir":"Reference","previous_headings":"","what":"stylehaven: Quick style utilities and guides — stylehaven-package","title":"stylehaven: Quick style utilities and guides — stylehaven-package","text":"collection style utilities mostly revolving around making clean labels legible plots (eventually) examples building common plots. whole lot , probably never , just collection utilities, examples, best(?) practices.","code":""},{"path":[]},{"path":"https://ct-data-haven.github.io/stylehaven/reference/stylehaven-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"stylehaven: Quick style utilities and guides — stylehaven-package","text":"Maintainer: Camille Seaberry camille@ctdatahaven.org (ORCID)","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/theme_din.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme Din — theme_din","title":"Theme Din — theme_din","text":"clean theme especially suited labeled bar charts Cleveland dot plots. Designed based DIN family fonts, now defaults font \"Roboto Condensed\". defaults base_family = \"roboto\", depends ) using showtext sysfonts get font called \"roboto\", b) already font loaded name. Use sysfonts::font_add_google sysfonts::font_add set different font.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/theme_din.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme Din — theme_din","text":"","code":"theme_din(   base_size = 14,   base_family = \"roboto\",   xgrid = FALSE,   ygrid = TRUE,   fallback_google = TRUE )"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/theme_din.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme Din — theme_din","text":"base_size Base font size base_family Base font family; defaults \"roboto\", set showtext xgrid logical turning x-grid , \"dotted\", light dotted grid ygrid logical turning y-grid , \"dotted\", light dotted grid fallback_google Logical: TRUE base_family currently loaded, load Roboto Condensed Google. FALSE, load system sans font. Defaults TRUE.","code":""},{"path":[]},{"path":"https://ct-data-haven.github.io/stylehaven/reference/themed_label.html","id":null,"dir":"Reference","previous_headings":"","what":"Create cowplot label based on a ggplot theme — themed_label","title":"Create cowplot label based on a ggplot theme — themed_label","text":"wrapper around cowplot::draw_label() creates ggplot-based label inherits formatting given theme element. less superceded ggplot's new plot.title.position theme argument.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/themed_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create cowplot label based on a ggplot theme — themed_label","text":"","code":"themed_label(label, theme = NULL, element = \"text\", x = 0.01, hjust = 0, ...)"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/themed_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create cowplot label based on a ggplot theme — themed_label","text":"label string text label. theme ggplot theme; NULL (default), get current theme ggplot2::theme_get(). element Name theme element; defaults base text. x x-position; defaults 0.01 hjust Horizontal alignment; defaults 0 ... arguments pass cowplot::draw_label().","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/themed_label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create cowplot label based on a ggplot theme — themed_label","text":"ggplot object.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/themed_label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create cowplot label based on a ggplot theme — themed_label","text":"","code":"#TODO"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/title_case.html","id":null,"dir":"Reference","previous_headings":"","what":"Title casing — title_case","title":"Title casing — title_case","text":"function wrapper around clean_titles() corrects fact words title capitalized (articles, prepositions, etc. beginning title). follows APA style guide best , may exceptions fix manually (see examples).","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/title_case.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title casing — title_case","text":"","code":"title_case(x, lower = NULL, clean = TRUE, ...)"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/title_case.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title casing — title_case","text":"x character vector alter lower Aside built-list articles prepositions, additional words kept lowercase. clean Boolean: TRUE (default), strings passed clean_titles intermediate step, mostly break snakecased text words converting title casing. ... Arguments passed clean_titles cap_all Logical: TRUE, first letter word splitting capitalized. FALSE, first character string capitalized. Note order balance respecting consecutive capital letters, acronyms, split_case Logical: TRUE, consecutive lowercase-uppercase pairs treated two words separated. keep_running_caps Logical: TRUE, consecutive uppercase letters kept uppercase. space Character vector characters /regex patterns replaced space separate words. remove Character vector characters /regex patterns removed operations; NULL, nothing removed.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/title_case.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title casing — title_case","text":"character vector","code":""},{"path":[]},{"path":"https://ct-data-haven.github.io/stylehaven/reference/title_case.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title casing — title_case","text":"","code":"title_case(c(\"rates are rising in the area\", \"of all adults in the region\")) #> [1] \"Rates Are Rising in the Area\" \"Of All Adults in the Region\"  title_case(\"rates are going up in the area\") #> [1] \"Rates Are Going up in the Area\" # This result is technically incorrect--\"up\" is used as an adverb here, and  # under APA should be capitalized. Write this one out manually."},{"path":"https://ct-data-haven.github.io/stylehaven/reference/write_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Batch save plots to multiple formats. — write_plot","title":"Batch save plots to multiple formats. — write_plot","text":"formalized version function often utils scripts different projects. works well paired purrr::map, taking list plots list parameters (width, height, filename), saving PDF (good vector format) PNG (good decent resolution bitmap format) files using ggplot2::ggsave. default, add logo bottom plot using add_logo—look documentation see exactly pass logo. Note devices might act differently: example, SVG devices might quirks.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/write_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batch save plots to multiple formats. — write_plot","text":"","code":"write_plot(   plot,   filename,   width = 7,   height = 4.5,   add_logo = TRUE,   use_abs_logo = TRUE,   logo_abs = 0.15,   logo_scale = 0.05,   logo_img = NULL,   logo_pos = \"right\",   place_inside = FALSE,   dir = NULL,   separate_dirs = TRUE,   devs = list(pdf = grDevices::cairo_pdf, png = ragg::agg_png),   verbose = TRUE,   ... )"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/write_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Batch save plots to multiple formats. — write_plot","text":"plot ggplot object save filename String, filename without extension, e.g. \"cool_plot\" rather \"cool_plot.png\", since extensions added based devs argument. width Numeric, width saved plot inches. Default: 7 height Numeric, height saved plot inches. include additional height logo. Default: 4.5 add_logo Logical: TRUE (default), logo added plot using add_logo. use_abs_logo Logical, whether logo size supplied absolute (TRUE) relative plot height (FALSE). TRUE (default), logo height given logo_abs inches; otherwise, logo sized ratio plot height given logo_scale. batch writing plots, using absolute size probably best logo size charts, regardless chart's height. logo_abs absolute height logo, inches. Ignored use_abs_logo = FALSE. Default: 0.15 logo_scale ratio logo's height plot's height. Ignored use_abs_logo = TRUE. Default: 0.05 logo_img NULL (default), logo image saved system.file(\"extdata/logo.svg\", package = \"stylehaven\"), copy DataHaven's logo. See add_logo ways create supply logo, one exception: function handle ggplot objects logos way add_logo can. logo_pos String, side plot logo placed . Default: 'right' place_inside Logical, whether logo placed inside chart outside (default). Note opposite default add_logo—often placing logo inside chart works well, batch writing probably safer either default outside placement, use parameter alongside width & height. dir Directory write files. NULL, default, just working directory, case ggplot2::ggsave. separate_dirs Logical, whether save files separate directories based file type. TRUE (default), file \"cool_plot.png\" written \"dir/png/cool_plot.png\"; otherwise, file written just dir. necessary directories already exist, created. devs named list, names extensions use output files values specify graphics devices use, either strings functions (mix). See device argument ggplot2::ggsave() examples. defaults, c(pdf = cairo_pdf, png = ragg::agg_png), ones found work well writing ggplots, particularly high-resolution ones custom fonts. verbose Logical, whether print path file written (defaults TRUE). ... Additional arguments pass ggplot2::ggsave, turn passes graphics devices.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/write_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Batch save plots to multiple formats. — write_plot","text":"Returns nothing. verbose = TRUE, sends message console.","code":""},{"path":[]},{"path":"https://ct-data-haven.github.io/stylehaven/reference/write_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Batch save plots to multiple formats. — write_plot","text":"","code":"if (FALSE) { # \\dontrun{ library(ggplot2) plot1 <- ggplot(mtcars, aes(x = hp)) +     geom_density() write_plot(plot1, \"hp_density\") write_plot(plot1, \"hp_density\", devs = list(png = \"png\", svg = svg)) ggsave(\"svg/plot.svg\", plot1, device = svglite::svglite)  # how I usually use this for a whole document of plots plots <- list() plots[[\"mpg_histogram\"]] <- ggplot(mtcars, aes(x = mpg)) +     geom_histogram() plots[[\"hp_vs_mpg\"]] <- ggplot(mtcars, aes(x = hp, y = mpg)) +     geom_point() plot_params <- list(     mpg_histogram = list(w = 7, h = 4),     hp_vs_mpg = list(w = 5, h = 5) ) purrr::imap(plots, function(plt, id) {     # using plot ID as the filename     params <- plot_params[[id]]     write_plot(plt,         filename = id,         width = params$w,         height = params$h,         logo_abs = 0.2     ) }) } # }"},{"path":[]},{"path":"https://ct-data-haven.github.io/stylehaven/news/index.html","id":"fix-1-0-1","dir":"Changelog","previous_headings":"","what":"Fix","title":"stylehaven v1.0.1 (2025-04-16)","text":"bit cleanup palx, contrast_colors methods","code":""},{"path":[]},{"path":"https://ct-data-haven.github.io/stylehaven/news/index.html","id":"feat-1-0-0","dir":"Changelog","previous_headings":"","what":"Feat","title":"stylehaven v1.0.0 (2025-04-16)","text":"rewrite palx methods data: rewrite datasets, removing old ones dodging dependencies overhaul prep 2025 equity reports","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/news/index.html","id":"fix-1-0-0","dir":"Changelog","previous_headings":"","what":"Fix","title":"stylehaven v1.0.0 (2025-04-16)","text":"update functions match changed data","code":""}]
