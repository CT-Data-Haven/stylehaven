[{"path":"https://ct-data-haven.github.io/stylehaven/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 stylehaven authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/articles/dcws_example_plots.html","id":"unified-styling-setup","dir":"Articles","previous_headings":"","what":"Unified styling setup","title":"Plot examples from the DCWS launch","text":"Illustrates: Creating multiple weights font use across charts font_add_weights Creating array color palettes based primary color  ’ll keep plots one named list, output parameters (width & height, also include something like logo placement) another named list. ’ll map save plots PDF PNG. list widths & heights also makes easier dimensions within document (chunk fig.width fig.height) ’re exported. prints error running chunks reason can ignore .","code":"font_add_weights(\"Barlow Semi Condensed\", semibold = 500) #> ℹ Registering the following fonts: #> • Barlow Semi Condensed with regular weight 400 and bold weight 700 #> • Barlow Semi Condensed Semibold with semibold weight 500 and black weight 900  base_col <- \"#5e3da7\" palx_colors <- palx(base_col, n_shades = 5, plot = TRUE) qual_pal <- palx_colors$shade03 # use with offset labels to make nearly-white labels inside bars, dark gray labels outside tf_pal <- c(\"TRUE\" = palx_colors[[\"shade02\"]][[\"gray\"]], \"FALSE\" = palx_colors[[\"shade05\"]][[\"gray\"]])  theme_bar <- function(x, ...) {   camiller::theme_din(base_family = \"Barlow Semi Condensed\", ygrid = FALSE) +     theme(plot.caption.position = \"plot\",            strip.text = element_text(family = \"Barlow Semi Condensed Semibold\", face = \"plain\")) } theme_set(theme_bar()) update_geom_defaults(\"col\", list(fill = base_col)) update_geom_defaults(\"text\", list(size = 3.5, fontface = \"bold\", family = \"Barlow Semi Condensed\", color = tf_pal[[\"FALSE\"]]))  pal4 <- unname(qual_pal[c(\"gray\", \"blue\", \"teal\", \"red\")]) plots <- list() plot_params <- list(   financial_insecurity = list(w = 6, h = 5),   govt_trend = list(w = 5, h = 5),   cohesion = list(w = 5, h = 4) )"},{"path":"https://ct-data-haven.github.io/stylehaven/articles/dcws_example_plots.html","id":"facetted-bar-chart","dir":"Articles","previous_headings":"","what":"Facetted bar chart","title":"Plot examples from the DCWS launch","text":"Illustrates: Offsetting labels across multiple scales offset_lbls Lil bit string formatting functions won’t show rendered, ’ve set fig.width=plot_params$financial_insecurity$w, fig.height=plot_params$financial_insecurity$h chunk","code":"financial_to_plot <- fin_insecurity |>   filter(category %in% c(\"Connecticut\", \"Greater New Haven\", \"Age\", \"Race/Ethnicity\")) |>   mutate(category = forcats::fct_collapse(category, Total = c(\"Connecticut\", \"Greater New Haven\"))) |>   group_by(question) |>   offset_lbls(value = value, frac = 0.02, thresh = 0.2, fun = percent100) financial_to_plot #> # A tibble: 27 × 9 #> # Groups:   question [3] #>    question           category   group value is_small     off      y  just lbl   #>    <chr>              <fct>      <fct> <dbl> <lgl>      <dbl>  <dbl> <dbl> <chr> #>  1 food_insecurity    Total      Conn…  0.13 FALSE    -0.0076 0.122      1 13%   #>  2 food_insecurity    Total      Grea…  0.13 FALSE    -0.0076 0.122      1 13%   #>  3 food_insecurity    Age        Ages…  0.18 FALSE    -0.0076 0.172      1 18%   #>  4 food_insecurity    Age        Ages…  0.2  FALSE    -0.0076 0.192      1 20%   #>  5 food_insecurity    Age        Ages…  0.1  FALSE    -0.0076 0.0924     1 10%   #>  6 food_insecurity    Age        Ages…  0.05 TRUE      0.0114 0.0614     0 5%    #>  7 food_insecurity    Race/Ethn… White  0.09 FALSE    -0.0076 0.0824     1 9%    #>  8 food_insecurity    Race/Ethn… Black  0.2  FALSE    -0.0076 0.192      1 20%   #>  9 food_insecurity    Race/Ethn… Lati…  0.38 FALSE    -0.0076 0.372      1 38%   #> 10 housing_insecurity Total      Conn…  0.08 FALSE    -0.0036 0.0764     1 8%    #> # ℹ 17 more rows  plots[[\"financial_insecurity\"]] <- ggplot(financial_to_plot, aes(x = forcats::fct_rev(group), y = value)) +   geom_col(width = 0.8) +   geom_text(aes(label = lbl, y = y, hjust = just, color = is_small), show.legend = FALSE) +   coord_flip() +   scale_y_barcontinuous(breaks = NULL) +   scale_color_manual(values = tf_pal) +   facet_grid(rows = vars(category), cols = vars(question),              scales = \"free\", space = \"free_y\",              labeller = labeller(.cols = camiller::clean_titles)) +   theme(strip.text.x = element_text(hjust = 0),         strip.text.y = element_blank()) +   labs(x = NULL, y = NULL,        title = \"Younger adults and Latinos face hurdles to accessing basic needs\",        subtitle = \"Share of adults, 2021\")  plots[[\"financial_insecurity\"]]"},{"path":"https://ct-data-haven.github.io/stylehaven/articles/dcws_example_plots.html","id":"labeling-endpoints","dir":"Articles","previous_headings":"","what":"Labeling endpoints","title":"Plot examples from the DCWS launch","text":"endpoint_lbls adds columns labels offset slightly left lower limit right upper limit, corresponding hjust value align left-hand labels end string right-hand labels start string, labels use include grouping variable one sides. encourages direct labeling wean away legends. One thing deal margins plot: can set padding expansion, changes limits scale well, might need adjust breaks. ’s easy enough slopegraphs like get annoying don’t know exactly breaks need .  want switch sides long label, thing need change padding x-axis—everything else data frame.  just lines, full labels just left right fine, ’s also option add labels sides, can help make lines easier read","code":"govt_trend <- cws_trend |>   filter(indicator == \"local_govt_responsive\",          year %in% range(year),          category %in% c(\"Total\", \"Race/Ethnicity\"))  (govt_left <- govt_trend |>   endpoint_lbls(x = year, value = value, group = group,                  fun = percent100, long_side = \"left\")) #> # A tibble: 8 × 8 #>    year indicator             category       group  value     x  just lbl        #>   <dbl> <fct>                 <fct>          <fct>  <dbl> <dbl> <dbl> <chr>      #> 1  2015 local_govt_responsive Total          Total   0.49 2015.     1 Total: 49% #> 2  2015 local_govt_responsive Race/Ethnicity White   0.52 2015.     1 White: 52% #> 3  2015 local_govt_responsive Race/Ethnicity Black   0.37 2015.     1 Black: 37% #> 4  2015 local_govt_responsive Race/Ethnicity Latino  0.46 2015.     1 Latino: 4… #> 5  2021 local_govt_responsive Total          Total   0.57 2021.     0 57%        #> 6  2021 local_govt_responsive Race/Ethnicity White   0.63 2021.     0 63%        #> 7  2021 local_govt_responsive Race/Ethnicity Black   0.42 2021.     0 42%        #> 8  2021 local_govt_responsive Race/Ethnicity Latino  0.48 2021.     0 48%  ggplot(govt_left, aes(x = year, y = value, color = group, group = group)) +   geom_path(linewidth = 3) +   geom_point(size = 4) +   geom_text(aes(label = lbl, x = x, hjust = just)) +   scale_x_continuous(expand = expansion(add = c(2, 1)), breaks = c(2015, 2021)) +   scale_y_continuous(breaks = NULL) +   scale_color_manual(values = pal4) +   theme(legend.position = \"none\",         panel.grid.major.x = element_line(color = \"gray90\")) +   labs(x = NULL, y = NULL,        title = \"Views of local government are improving\",        subtitle = \"Share of adults who agree that local government is responsive,\\nConnecticut, 2015–2021\") govt_right <- govt_trend |>   endpoint_lbls(x = year, value = value, group = group,                  fun = percent100, long_side = \"right\") # this is the default side  plots[[\"govt_trend\"]] <- ggplot(govt_right, aes(x = year, y = value, color = group, group = group)) +   geom_path(linewidth = 3) +   geom_point(size = 4) +   geom_text(aes(label = lbl, x = x, hjust = just)) +   # in practice I might use ggrepel   scale_x_continuous(expand = expansion(add = c(1, 2)), breaks = c(2015, 2021)) +   scale_y_continuous(breaks = NULL) +   scale_color_manual(values = pal4) +   theme(legend.position = \"none\",         panel.grid.major.x = element_line(color = \"gray90\")) +   labs(x = NULL, y = NULL,        title = \"Views of local government are improving\",        subtitle = \"Share of adults who agree that local government is responsive,\\nConnecticut, 2015–2021\")  plots[[\"govt_trend\"]]"},{"path":"https://ct-data-haven.github.io/stylehaven/articles/dcws_example_plots.html","id":"separating-squished-labels","dir":"Articles","previous_headings":"","what":"Separating squished labels","title":"Plot examples from the DCWS launch","text":"Dot plots points directly labeled great values close together, ’s pain keep labels overlapping. One nice way handle calculate distance points line (whatever’s independent variable) offset labels within threshold label. data frame returns can used semi_join anti_join make 2 calls geom_text/geom_text_repel. argument thresh = 0.03 means values difference 0.03 considered close; absolute value.","code":"cohesion <- community_cohesion |>   filter(category %in% c(\"Greater New Haven\", \"Education\"))  ggplot(cohesion, aes(x = question, y = value, color = group)) +   geom_point(size = 9) +   geom_text(aes(label = percent100(value)), size = 3, color = \"white\") +   coord_flip() +   scale_x_discrete(labels = camiller::clean_titles) +   scale_y_continuous(breaks = NULL) +   scale_color_manual(values = pal4,                      guide = guide_legend(nrow = 2, byrow = TRUE, override.aes = list(size = 4))) +   theme(legend.position = \"bottom\",         panel.grid.major.y = element_line(size = 1, linetype = \"11\", color = \"gray90\")) +   labs(x = NULL, y = NULL, color = NULL) #> Warning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0. #> ℹ Please use the `linewidth` argument instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. (to_dodge <- cohesion |>   dodge_lbls(x = question, value = value, group = group, thresh = 0.02)) #> # A tibble: 4 × 2 #>   question             group                       #>   <chr>                <fct>                       #> 1 positive_role_models High school or less         #> 2 positive_role_models Some college or Associate's #> 3 satisfied_with_area  High school or less         #> 4 satisfied_with_area  Some college or Associate's plots[[\"cohesion\"]] <- ggplot(cohesion, aes(x = question, y = value, color = group)) +   geom_point(size = 9) +   geom_text(aes(label = percent100(value)),              data = ~anti_join(., to_dodge, by = c(\"question\", \"group\")),             size = 3, color = \"white\") +   ggrepel::geom_text_repel(aes(label = percent100(value)),             data = ~semi_join(., to_dodge, by = c(\"question\", \"group\")),             size = 3, fontface = \"bold\", family = \"Barlow Semi Condensed\",             direction = \"x\", nudge_x = 0.2, min.segment.length = 2, seed = 1,             segment.color = tf_pal[[\"TRUE\"]], box.padding = 0.5, show.legend = FALSE) +   coord_flip() +   scale_x_discrete(labels = camiller::clean_titles) +   scale_y_continuous(breaks = NULL) +   scale_color_manual(values = pal4,                      guide = guide_legend(nrow = 2, byrow = TRUE, override.aes = list(size = 4))) +   theme(legend.position = \"bottom\",         panel.grid.major.y = element_line(size = 1, linetype = \"11\", color = \"gray90\")) +   labs(x = NULL, y = NULL, color = NULL)  plots[[\"cohesion\"]]"},{"path":"https://ct-data-haven.github.io/stylehaven/articles/dcws_example_plots.html","id":"batch-writing-image-files","dir":"Articles","previous_headings":"","what":"Batch writing image files","title":"Plot examples from the DCWS launch","text":"exporting 5,000 plots equity reports, ’m excited codify way go lists plots plot parameters think write plots , adding & scaling logos. didn’t good way test lots different graphics devices different platforms, file Github issue exports don’t work. default, add logo (using stylehaven::add_logo) adjust height plot fit aspect ratio stays even appending logo bottom image. Writing one plot (default, PNG & PDF): Even better, iterating plots plot params write plots. One thing note careful ’re matching plots params ’re separate lists: might get messed lists order, even ’re named. (bothered enough post question Stack Overflow.) can map one list use names pull entries list.","code":"out_dir <- file.path(tempdir(), \"plots\") if (!dir.exists(out_dir)) dir.create(out_dir)  write_plot(plots$govt_trend, filename = \"government_trend\",             dir = out_dir, width = 5, height = 5, dpi = 150, verbose = FALSE)  list.files(out_dir, recursive = TRUE) #> [1] \"pdf/government_trend.pdf\" \"png/government_trend.png\" purrr::iwalk(plots, function(pl, id) {   ps <- plot_params[[id]]   write_plot(pl, filename = id, dir = out_dir,              width = ps$w, height = ps$h, dpi = 150, verbose = FALSE) })  list.files(out_dir, recursive = TRUE) #> [1] \"pdf/cohesion.pdf\"             \"pdf/financial_insecurity.pdf\" #> [3] \"pdf/government_trend.pdf\"     \"pdf/govt_trend.pdf\"           #> [5] \"png/cohesion.png\"             \"png/financial_insecurity.png\" #> [7] \"png/government_trend.png\"     \"png/govt_trend.png\""},{"path":"https://ct-data-haven.github.io/stylehaven/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Camille Seaberry. Author, maintainer.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Seaberry C (2024). stylehaven: Quick style utilities guides. R package version 0.1.1,  https://ct-data-haven.github.io/stylehaven, https://github.com/CT-Data-Haven/stylehaven.","code":"@Manual{,   title = {stylehaven: Quick style utilities and guides},   author = {Camille Seaberry},   year = {2024},   note = {R package version 0.1.1,  https://ct-data-haven.github.io/stylehaven},   url = {https://github.com/CT-Data-Haven/stylehaven}, }"},{"path":"https://ct-data-haven.github.io/stylehaven/index.html","id":"stylehaven","dir":"","previous_headings":"","what":"Quick style utilities and guides","title":"Quick style utilities and guides","text":"collection style utilities mostly revolving around making clean labels legible plots examples building common plots, intended -house use DataHaven. ’s whole lot , probably never , just collection utilities, examples, best(?) practices related plotting. branches Nathan Kim’s (@18kimn) work developing first steps styleguide intern.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Quick style utilities and guides","text":"can install stylehaven GitHub: See vignettes examples.","code":"remotes::install_github(\"CT-Data-Haven/stylehaven\")"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/add_logo.html","id":null,"dir":"Reference","previous_headings":"","what":"Easily add a logo to a ggplot — add_logo","title":"Easily add a logo to a ggplot — add_logo","text":"function wraps around functions cowplot magick add logo (annotation) bottom ggplot plot, otherwise tedious easy forget process. meant flexible types objects can place; result, less flexible placement customization. specific needs, source function easy build upon.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/add_logo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Easily add a logo to a ggplot — add_logo","text":"","code":"add_logo(   plot,   image = NULL,   position = c(\"right\", \"left\"),   height = 0.05,   place_inside = TRUE,   ... )"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/add_logo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Easily add a logo to a ggplot — add_logo","text":"plot ggplot object onto logo placed. image Either string giving path URL image file read magick::image_read; results reading file manipulating image already magick::image_read magick functions; ggplot object / grob; object can handled cowplot::draw_image; NULL, default. NULL, image come file system.file(\"extdata/logo.svg\", package = \"stylehaven\"). built, logo DataHaven, file can replaced repackaging library organizations projects. position String, either \"left\" \"right\", giving side logo aligned. Default: \"right\" height Numeric: height logo, percentage height image given plot. Adjust necessary based dimensions logo. Default: 0.05 place_inside Logical: TRUE (default), logo drawn within plotting area; otherwise, additional grob built plot, meaning logo later cropped away, may undesirable. ... Additional arguments passed cowplot::draw_grob attaching grob, cowplot::draw_image otherwise.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/add_logo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Easily add a logo to a ggplot — add_logo","text":"ggplot object.","code":""},{"path":[]},{"path":"https://ct-data-haven.github.io/stylehaven/reference/add_logo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Easily add a logo to a ggplot — add_logo","text":"","code":"if(interactive()){   p <- ggplot2::ggplot(iris, ggplot2::aes(x = Sepal.Length)) +      ggplot2::geom_density() +        ggplot2::labs(title = \"Test chart\", caption = \"Source: 2019 ACS 5-year estimates\")       add_logo(p)      add_logo(p, magick::image_read(system.file(\"extdata/25th_logo.png\", package = \"stylehaven\")),      height = 0.1)       # This example logo is not all that attractive, but shows how you might      # attach a ggplot grob as a dynamically-created logo      dummy_data <- data.frame(town = letters[1:4],                               pop = c(21000, 40000, 81000, 36000))       gg_logo <- ggplot2::ggplot(dummy_data, ggplot2::aes(x = town, y = pop)) +        ggplot2::geom_col(width = 0.8, fill = \"skyblue\") +        ggplot2::annotate(geom = \"text\", label = \"DataHaven\", x = 0.6, y = 6e4, hjust = 0,                          family = \"mono\", size = 5) +        ggplot2::theme_void()       add_logo(p, gg_logo, width = 0.2, height = 0.1)   }"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/age_lbls.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean up age group labels — age_lbls","title":"Clean up age group labels — age_lbls","text":"function tedious regex replacement make common labels use age groups (.e. syntactically correct variable names) labels meant display charts tables. main features replacing underscores numbers dashes, adding space text numbers, replacing symbols, parsing numbers. \"ages00_17\" becomes \"Ages 0-17\", \"ages65plus\" becomes \"Ages 65+\". course, also use numeric ranges, like years.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/age_lbls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean up age group labels — age_lbls","text":"","code":"age_lbls(x)"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/age_lbls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean up age group labels — age_lbls","text":"x string vector labels clean ","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/age_lbls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean up age group labels — age_lbls","text":"string vector display-worthy labels","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/age_lbls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean up age group labels — age_lbls","text":"","code":"a <- c(\"ages00_17\", \"ages18_64\", \"ages65plus\", \"under18\", \"ages18up\") age_lbls(a) #> [1] \"Ages 0-17\"  \"Ages 18-64\" \"Ages 65+\"   \"Under 18\"   \"Ages 18+\""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/contrast_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Choose label colors based on contrast — contrast_colors","title":"Choose label colors based on contrast — contrast_colors","text":"pair utility functions situation often gloss : making chart different fill colors (stacked bars sequential palette), can good vary label color maintain good contrast background foreground. example, ColorBrewer palettes often go dark color light color black dark gray labels visible darkest bar, white light gray labels visible lightest bar. helps prepare testing contrast palette (presumably bar fill colors) light dark option (presumably label text bars). contrast ratio calculated colorspace::contrast_ratio according WCAG algorithm, minimum ratio defaults 4.5 based accessibility guidelines. verbose true combination palette color label colors fails meet minimum, get message letting know. example, using medium gray colors dark light labels likely lead situation neither dark light label color enough contrast palette. mutate_contrast takes step , working data frame determine label colors factor column (column can become factor).","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/contrast_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choose label colors based on contrast — contrast_colors","text":"","code":"contrast_colors(   pal,   dark = \"black\",   light = \"white\",   n = 5,   min_ratio = 4.5,   verbose = TRUE,   labels_only = TRUE,   plot = FALSE )  mutate_contrast(   x,   col,   pal,   dark = \"black\",   light = \"white\",   min_ratio = 4.5,   verbose = TRUE )"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/contrast_colors.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Choose label colors based on contrast — contrast_colors","text":"https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/contrast_colors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Choose label colors based on contrast — contrast_colors","text":"pal String: either vector colors (either named R colors hex codes), name palette RColorBrewer, rcartocolor, viridisLite packages. name palette, respective function called fetch vector hex codes. dark String giving single valid color use dark label option, either named R color hex code. Default: 'black' light String giving single valid color use light label option, either named R color hex code. Default: 'white' n contrast_colors, pal name palette, corresponding palette n colors. Ignored otherwise. mutate_contrast, determined number levels col. Default: 5 min_ratio Minimum contrast ratio, pair colors deemed low-contrast. verbose true sets colors fail meet minimum, get diagnostic message letting know. Default: 4.5 verbose Logical, whether print diagnostic info issues contrast ratios, Default: TRUE labels_only Logical, whether return labels, .e. just vector dark light values, depending greatest contrast color pal, full data frame used calculations, including ratios. Default: TRUE plot Logical, whether print ggplot swatch tiles filled pal labels dark light label colors. fill color, label color highest contrast ratio starred, although highest might minimum required. change return value. Default: FALSE x data frame col Bare name column x along palette mapped. already factor, coerced one levels order appear.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/contrast_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Choose label colors based on contrast — contrast_colors","text":"contrast_colors: labels_only, named character vector colors, either value dark light, giving highest contrast ratio value pal. length pal (n, gave pal name palette retrieve), names fill colors. Otherwise, data frame number rows colors pal 6 columns info , including fill label colors (see examples). mutate_contrast, original data frame given x, columns added fill (according palette) label color.","code":""},{"path":[]},{"path":"https://ct-data-haven.github.io/stylehaven/reference/contrast_colors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Choose label colors based on contrast — contrast_colors","text":"","code":"# using a pre-defined palette qual_pal <- c(\"#009B9E\", \"#DAA51B\", \"#C75DAB\", \"#898DA7\", \"#2A39A7\") contrast_colors(qual_pal) #> #009B9E #DAA51B #C75DAB #898DA7 #2A39A7  #> \"black\" \"black\" \"black\" \"black\" \"white\"   # returning a data frame contrast_colors(qual_pal, labels_only = FALSE) #>      fill dark light  max lbl_color low_contrast #> 1 #009B9E 6.18  3.40 6.18     black        FALSE #> 2 #DAA51B 9.38  2.24 9.38     black        FALSE #> 3 #C75DAB 5.58  3.76 5.58     black        FALSE #> 4 #898DA7 6.43  3.27 6.43     black        FALSE #> 5 #2A39A7 2.24  9.37 9.37     white        FALSE  # printing the plot, brewer palette contrast_colors(\"YlGnBu\", plot = TRUE)  #> #FFFFCC #A1DAB4 #41B6C4 #2C7FB8 #253494  #> \"black\" \"black\" \"black\" \"black\" \"white\"   # not enough contrast, carto palette contrast_colors(\"Vivid\", n = 7, dark = \"gray40\", plot = TRUE) #> ℹ At least one set of colors failed to meet the minimum contrast threshold of 4.5. Consider adjusting the palette and/or using more distinct label colors. #> • For #E58606, color #1, ratio to `dark` is 2.12; ratio to `light` is 2.71. #> • For #52BCA3, color #3, ratio to `dark` is 2.48; ratio to `light` is 2.31. #> • For #99C945, color #4, ratio to `dark` is 2.95; ratio to `light` is 1.95. #> • For #CC61B0, color #5, ratio to `dark` is 1.61; ratio to `light` is 3.56. #> • For #A5AA99, color #7, ratio to `dark` is 2.41; ratio to `light` is 2.38.  #>  #E58606  #5D69B1  #52BCA3  #99C945  #CC61B0  #24796C  #A5AA99  #>  \"white\"  \"white\" \"gray40\" \"gray40\"  \"white\"  \"white\" \"gray40\"   library(ggplot2) # For a very small data frame, it's possible to assign label colors with  # `contrast_colors` directly back into the data frame, then use # `scale_color_identity`.  food <- dplyr::filter(fin_insecurity, question == \"food_insecurity\",                        category %in% c(\"Greater New Haven\", \"Age\")) food$lbl_color <- contrast_colors(qual_pal) ggplot(food, aes(x = group, y = value, fill = group)) +   geom_col() +   geom_text(aes(label = percent100(value), color = lbl_color),              vjust = 1, nudge_y = -0.01, fontface = \"bold\") +   scale_fill_manual(values = qual_pal) +   scale_color_identity()   # For a larger data frame, use `mutate_contrast` to get the contrast info # joined back to your data frame. Since this includes the fill colors, you # can use `scale_fill_identity`, but this requires putting your legend back in. health <- dplyr::filter(self_rated_health, category == \"Age\") |>   mutate_contrast(col = response, pal = \"viridis\", dark = \"gray10\") head(health) #> # A tibble: 6 × 6 #>   category group      response  value fill      lbl_color #>   <fct>    <fct>      <fct>     <dbl> <chr>     <chr>     #> 1 Age      Ages 18-34 Excellent  0.24 #440154FF white     #> 2 Age      Ages 18-34 Very good  0.38 #3B528BFF white     #> 3 Age      Ages 18-34 Good       0.27 #21908CFF black     #> 4 Age      Ages 18-34 Fair       0.1  #5DC863FF black     #> 5 Age      Ages 18-34 Poor       0.01 #FDE725FF black     #> 6 Age      Ages 35-49 Excellent  0.22 #440154FF white      ggplot(health, aes(x = group, y = value, fill = fill, group = group)) +   geom_col(position = position_fill()) +   geom_text(aes(label = percent100(value), color = lbl_color),              position = position_fill(vjust = 0.5), fontface = \"bold\") +   scale_color_identity() +   scale_fill_identity(guide = guide_legend(), labels = levels(health$response))   # Alternatively, pull out the palette as a named list and pass that to # `scale_fill_manual`. resp_pal <- health |>   dplyr::distinct(response, fill) |>   tibble::deframe()  ggplot(health, aes(x = group, y = value, fill = response, group = group)) +   geom_col(position = position_fill()) +   geom_text(aes(label = percent100(value), color = lbl_color),              position = position_fill(vjust = 0.5), fontface = \"bold\") +   scale_color_identity() +   scale_fill_manual(values = resp_pal)"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/cws2018.html","id":null,"dir":"Reference","previous_headings":"","what":"2018 DCWS sample indicators — cws2018","title":"2018 DCWS sample indicators — cws2018","text":"subset 2018 DataHaven Community Wellbeing Survey data Greater New Haven covering several commonly used indicators, split separate data frames topic format.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/cws2018.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"2018 DCWS sample indicators — cws2018","text":"","code":"chronic_disease  community_cohesion  fin_insecurity  walkability"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/cws2018.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"2018 DCWS sample indicators — cws2018","text":"Data frames 4 columns: question Abbreviated indicator category Category: gender, age, etc. group Group: male, female, ages 18–34, etc. value Percentage value object class tbl_df (inherits tbl, data.frame) 69 rows 4 columns. object class tbl_df (inherits tbl, data.frame) 69 rows 4 columns. object class tbl_df (inherits tbl, data.frame) 69 rows 4 columns. object class tbl_df (inherits tbl, data.frame) 46 rows 4 columns.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/cws2018.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"2018 DCWS sample indicators — cws2018","text":"2018 DataHaven Community Wellbeing Survey","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/cws2018.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"2018 DCWS sample indicators — cws2018","text":"Detail meaning values dataset question:","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/cws_trend.html","id":null,"dir":"Reference","previous_headings":"","what":"2015–2018 DCWS sample trends — cws_trend","title":"2015–2018 DCWS sample trends — cws_trend","text":"subset 3 questions 2015 & 2021 DataHaven Community Wellbeing Surveys Connecticut.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/cws_trend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"2015–2018 DCWS sample trends — cws_trend","text":"","code":"cws_trend"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/cws_trend.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"2015–2018 DCWS sample trends — cws_trend","text":"data frame 48 rows 5 variables: year Year, either 2015 2021 indicator Indicator: satisfied area, local government responsive, police approval category Category: gender, age, etc. group Group: male, female, ages 18–34, etc. value Percentage value","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/cws_trend.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"2015–2018 DCWS sample trends — cws_trend","text":"2015 & 2021 DataHaven Community Wellbeing Survey","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/dodge_lbls.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare chart labels that should be repelled apart — dodge_lbls","title":"Prepare chart labels that should be repelled apart — dodge_lbls","text":"function designed plots, particularly dot plots, values close together need pushed apart order avoid overlaps. returns just columns needed know points dodged apart. calculate new positions points— depends specific use, ggrepel::geom_text_repel likely use . probably call get data frame points dodged, use dplyr::semi_join original data plot points need dodged, dplyr::anti_join ones need dodged (see example).","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/dodge_lbls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare chart labels that should be repelled apart — dodge_lbls","text":"","code":"dodge_lbls(data, x, value, group, thresh, digits = 2)"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/dodge_lbls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare chart labels that should be repelled apart — dodge_lbls","text":"data data frame x Bare name column plotted independent axis value Bare name dependent variable group Bare column name grouping variable, likely used point color thresh Numeric: threshold value difference points. pair points difference less thresh considered close, included output points dodge. digits Number digits round calculating differences points. Default: 2","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/dodge_lbls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare chart labels that should be repelled apart — dodge_lbls","text":"data frame -close points, columns corresponding x group columns.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/dodge_lbls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare chart labels that should be repelled apart — dodge_lbls","text":"","code":"if (requireNamespace(\"ggrepel\", quietly = TRUE)) {   library(ggplot2)   cohesion_by_race <- community_cohesion |>     dplyr::filter(category %in% c(\"Greater New Haven\", \"Race/Ethnicity\"))    ggplot(cohesion_by_race, aes(x = question, y = value)) +     geom_point(aes(color = group), size = 8) +     geom_text(aes(label = percent100(value)), color = \"white\", size = 3) +     coord_flip()    (to_dodge <- dodge_lbls(cohesion_by_race,                           x = question,                           value = value,                           group = group,                           thresh = 0.015))    ggplot(cohesion_by_race, aes(x = question, y = value)) +     geom_point(aes(color = group), size = 8) +     geom_text(aes(label = percent100(value)),               data = ~dplyr::anti_join(., to_dodge, by = c(\"question\", \"group\")),               color = \"white\", size = 3) +     ggrepel::geom_text_repel(aes(label = percent100(value), color = group),                              data = ~dplyr::semi_join(., to_dodge, by = c(\"question\", \"group\")),                              size = 3, direction = \"x\", nudge_x = 0.2, seed = 1) +     coord_flip() }"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/endpoint_lbls.html","id":null,"dir":"Reference","previous_headings":"","what":"endpoint_lbls — endpoint_lbls","title":"endpoint_lbls — endpoint_lbls","text":"Easily put together labels endpoints chart, line chart outwardly-justified labels end. Labels formats {name}: {fun(value)} (long format) {fun(value} (short format) created, \"Connecticut: 12%\" \"16%\" respectively. Often one format used one end format end, long_side gives options around . intention around combining labels like can put labels ends, aligned nicely, single geom_text call.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/endpoint_lbls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"endpoint_lbls — endpoint_lbls","text":"","code":"endpoint_lbls(   data,   x,   value,   group,   mult = 0.05,   add = NULL,   fun = NULL,   long_side = c(\"right\", \"left\", \"both\", \"none\") )"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/endpoint_lbls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"endpoint_lbls — endpoint_lbls","text":"data data frame x Bare column name independent value start finish points (probably date). numeric, endpoint_lbls try coerce numeric, may yield undesired results. value Bare column name value column group Bare column name name grouping variable shown labels. mult Numeric; ratio x variable labels offset. Default: 0.05. add Numeric; single value along x variable labels offset. Defaults NULL. mult add given, mult takes precedence. Previously frac argument supposed act like mult erroneously acted like add. fun function, used create value labels. scales::label_* functions useful . NULL (default), formatting done. long_side Character, either \"right\" (default), \"left\", \"\", \"none\". \"left\" \"right\", refers whether longer label right left, returning short label opposite side. \"\", long labels returned; \"none\", short labels returned. Regardless, labels combined new column called lbl.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/endpoint_lbls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"endpoint_lbls — endpoint_lbls","text":"data frame: original data frame passed data, 3 additional columns: x, x-values offsets added just, column 0 1 giving justification value dependent end label appear lbl, column formatted label text","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/endpoint_lbls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"endpoint_lbls — endpoint_lbls","text":"","code":"library(ggplot2)    # note that it will still be up to your judgment to set scale expansion,    # since that will depend on things outside the scope of just this function    cws_trend |>      dplyr::filter(indicator == \"local_govt_responsive\", category == \"Age\") |>      endpoint_lbls(value = value, x = year, group = group,                    fun = percent100) |>      ggplot(aes(x = year, y = value, color = group)) +      geom_line() +      geom_point(size = 3) +      geom_text(aes(label = lbl, hjust = just, x = x)) +      scale_x_continuous(expand = expansion(add = c(1, 3)),                         breaks = c(2015, 2021))      cws_trend |>      dplyr::filter(indicator == \"local_govt_responsive\", category == \"Age\") |>      endpoint_lbls(value = value, x = year, group = group, long_side = \"both\",                    fun = percent100, add = 0.4, mult = NULL) |>      ggplot(aes(x = year, y = value, color = group)) +      geom_line() +      geom_point(size = 3) +      geom_text(aes(label = lbl, hjust = just, x = x)) +      scale_x_continuous(expand = expansion(add = 3),                         breaks = c(2015, 2021))"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/font_add_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Register a set of 4 font weights for use with showtext — font_add_weights","title":"Register a set of 4 font weights for use with showtext — font_add_weights","text":"Sometimes longer document lots charts, good limit much text bold instead make use semibold font faces. font_add_weights registers pair fonts Google Fonts. family, one typical set weights (default, regular = 400 bold = 700), bolder versions (default regular = 600, bold = 900). weight unavailable, nothing registered message print weights available font family.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/font_add_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register a set of 4 font weights for use with showtext — font_add_weights","text":"","code":"font_add_weights(name, regular = 400, semibold = 600, bold = 700, black = 900)"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/font_add_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register a set of 4 font weights for use with showtext — font_add_weights","text":"name Name font search Google Fonts. function register one family name, another family name appended \"Semibold.\" regular Numeric, defaults 400 semibold Numeric, defaults 600 bold Numeric, defaults 700 black Numeric, defaults 900","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/font_add_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Register a set of 4 font weights for use with showtext — font_add_weights","text":"Returns nothing, registers fonts sysfonts::font_add_google. Call sysfonts::font_families() confirm font family loaded.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/font_add_weights.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Register a set of 4 font weights for use with showtext — font_add_weights","text":"Font weights CSS styling, values multiples 100 100 900. defaults used norms used web typography. fonts available weights might like, many fonts Google well suited data visualization come many weights.","code":""},{"path":[]},{"path":"https://ct-data-haven.github.io/stylehaven/reference/font_add_weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register a set of 4 font weights for use with showtext — font_add_weights","text":"","code":"if (interactive()) { library(ggplot2) font_add_weights(\"Source Sans 3\", black = 800) showtext::showtext_auto() ggplot(iris, aes(x = Sepal.Width)) +   geom_histogram(binwidth = 0.25) +   facet_wrap(vars(Species), nrow = 1) +   labs(title = \"Font weights in use are 400, 600, and 700\",        subtitle = \"Sepal width by species\") +   theme_gray(base_family = \"Source Sans 3\") +   theme(plot.title = element_text(family = \"Source Sans 3\", face = \"bold\"), # 700         plot.subtitle = element_text(family = \"Source Sans 3 Semibold\"), # 600         strip.text = element_text(family = \"Source Sans 3 Semibold\")) # 600 }"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/life_exp.html","id":null,"dir":"Reference","previous_headings":"","what":"Life expectancy — life_exp","title":"Life expectancy — life_exp","text":"Dataset life expectancy years census tract within New Haven County 2010 2015.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/life_exp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Life expectancy — life_exp","text":"","code":"life_exp"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/life_exp.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Life expectancy — life_exp","text":"data frame 189 rows 3 variables: tract Tract FIPS code town Town name value Life expectancy, including NA values 9 tracts without data","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/life_exp.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Life expectancy — life_exp","text":"CDC's USALEEP project, current Oct. 2021","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/number_formats.html","id":null,"dir":"Reference","previous_headings":"","what":"Number formatting utilities — percent100","title":"Number formatting utilities — percent100","text":"collection small utilities formatting numbers, especially use charts tables. Many simply wrappers around scales functions.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/number_formats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number formatting utilities — percent100","text":"","code":"percent100(x, ...)  percent_lt1(x, ...)  round100(x, ...)"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/number_formats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number formatting utilities — percent100","text":"x numeric vector ... Additional arguments pass underlying scales functions, scales::percent scales::number.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/number_formats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number formatting utilities — percent100","text":"string vector formatted numbers.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/number_formats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Number formatting utilities — percent100","text":"round100 takes decimal, percentage, multiplies 100, rounds, e.g. 0.251 becomes \"25\", useful pasting additional text (see examples). percent100 adds round100 appending percent sign, e.g. 0.251 becomes \"25%\". percent_lt1 takes additional step, replacing values 1 percent \"<1%\", useful suppressing small numbers.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/number_formats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number formatting utilities — percent100","text":"","code":"paste(\"The value is\", round100(0.251), \"percent.\") # outputs \"The value is 25 percent.\" #> [1] \"The value is 25 percent.\"  percent100(c(0.25, 0.251, 0.008)) # outputs \"25%\", \"25%\", \"1%\" #> [1] \"25%\" \"25%\" \"1%\"   percent_lt1(c(0.25, 0.251, 0.008)) # outputs \"25%\", \"25%\", \"<1%\" #> [1] \"25%\" \"25%\" \"<1%\""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/offset_lbls.html","id":null,"dir":"Reference","previous_headings":"","what":"Offset bar chart labels without hard-coding — offset_lbls","title":"Offset bar chart labels without hard-coding — offset_lbls","text":"Sometimes add direct labels bar chart, can annoying hard-code value offset labels add padding end bar, e.g. using nudge_y. also problem different scales different facets, batch generating charts know exactly scale . ratio_to_max finds maximum value vector, returns fraction specify. offset_lbls adds columns data parameters adjusting labels, uses ratio_to_max hood. Values offset proportionate maximum value dataset. also handles situations bars small fit labels properly inside bar.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/offset_lbls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Offset bar chart labels without hard-coding — offset_lbls","text":"","code":"offset_lbls(   data,   value,   frac = 0.05,   thresh = 0.15,   margin = 1.5,   fun = NULL,   na = \"N/A\" )  ratio_to_max(x, frac = 0.05)"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/offset_lbls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Offset bar chart labels without hard-coding — offset_lbls","text":"data data frame value Bare name column use frac Numeric, desired fraction maximum value offset. Default: 0.05 thresh Numeric threshold ratio values considered small fit inside bars. Default: 0.15 margin Numeric scaling factor positioning small values / right bars. Default: 1.5 fun function, used create value labels. scales::label_* functions useful . NULL (default), formatting done. na string use replace NA values. Default: \"N/\". NULL, print \"NA\". x numeric vector","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/offset_lbls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Offset bar chart labels without hard-coding — offset_lbls","text":"ratio_to_max, single number giving frac * max(x). offset_lbls, data frame number rows data additional 5 columns.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/offset_lbls.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Offset bar chart labels without hard-coding — offset_lbls","text":"offset_lbls makes decisions might want place labels tries force choices . first thing calculated baseline offset, ratio_to_max. value, ratio maximum value. ratio less thresh, value considered \"small\". non-small values, y position calculated subtracting baseline offset value; small values, y position value plus baseline times margin. Additionally, can set text justifications differently small non-small values set alignment labels bar. good mess around frac thresh suit chart. find horizontal bars might need smaller values frac /larger values thresh. columns returned data frame : is_small: Logical: value considered small respect maximum value threshold. useful white labels inside bars, need black gray text labels fall outside bars. : Numeric: number y-positions offset, positive small values negative non-small values y: Numeric: y-positions place labels. NA values replaced 0. just: Numeric, either 0 1 use horizontal vertical justification e.g. ggplot2::geom_text. lbl: Character: values formatted function fun, NA values replaced per na argument.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/offset_lbls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Offset bar chart labels without hard-coding — offset_lbls","text":"","code":"library(ggplot2)  chronic_disease |>   dplyr::filter(question == \"diabetes\", category == \"Age\") |>   offset_lbls(value, fun = percent100) |>   ggplot(aes(x = group, y = value)) +   geom_col() +   geom_text(aes(y = y, label = lbl, color = is_small, vjust = just), show.legend = FALSE) +   scale_color_manual(values = c(\"TRUE\" = \"gray30\", \"FALSE\" = \"white\"))"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/palx.html","id":null,"dir":"Reference","previous_headings":"","what":"Make multi-hue, multi-shade qualitative color palettes — palx","title":"Make multi-hue, multi-shade qualitative color palettes — palx","text":"palx based Palx javascript library, basically port core functions using colorspace package. Provided base color, pulls set hues across spectrum lightness saturation, plus gray color. creates shades hues nearly black nearly white. probably actually want every hue; just good way get bunch colors choose . can view palette graphically running plot(my_palx), setting plot = TRUE, directly calling plot_palx. creates grid hue vs. shade tiles.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/palx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make multi-hue, multi-shade qualitative color palettes — palx","text":"","code":"palx(   color,   n_hues = 8,   n_shades = 9,   row = NULL,   as_df = FALSE,   plot = FALSE,   labels = FALSE )  # S3 method for palx as_tibble(x, ...)  plot_palx(x, ..., labels = FALSE)"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/palx.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Make multi-hue, multi-shade qualitative color palettes — palx","text":"https://github.com/jxnblk/palx","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/palx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make multi-hue, multi-shade qualitative color palettes — palx","text":"color string color name (\"red\") hex code (\"#6f54d6\").' single value, color palette based around, though guaranteed exact color final palette. n_hues number 1 12. number hues returned + 1, gray color added. n_shades number, number shades return hue. Defaults 9; many probably become hard distinguish. row Numeric. NULL, default, rows (shades) returned. Otherwise, rows indices returned. Just shortcut subsetting list. as_df Logical, whether return data frame (as_df = TRUE) list character vectors. Defaults FALSE. plot Logical, whether call plot_palx returning. change function returns, just prints ggplot chart returns colors normal. Defaults FALSE. labels Logical, whether add labels tile giving colors' hex codes. Defaults FALSE. x output calling palx, either list data frame ... used","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/palx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make multi-hue, multi-shade qualitative color palettes — palx","text":"as_df = TRUE, tibble n_shades rows one column per hue, plus column giving shade number. Otherwise, named list (length n_shades) character vectors, list item represents one shade. tibble named list extended \"palx\" class, users can conveniently run plot(my_palx) as_tibble(my_palx).","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/palx.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make multi-hue, multi-shade qualitative color palettes — palx","text":"notes color: Hue refers commonly general name color, e.g. blue yellow. Shade refers light dark color , e.g. light blue, dark blue. Saturation refers strength color, distance neutral gray. color spectrum broken even chunks, set wavelengths appear pretty similar--shows lime-green-teal-cyan-blue colors. just human eyeballs work guess. palettes used sequential palettes, even pulling multiple shades one hue. Good sequential palettes corrected perceptual differences shade, whereas just takes even steps. Also please use rainbow scales sequential data. likely want one two shades worth colors (use row arguments), either adjacent colors appear \"even\", one light one dark paired palette. Saturated colors dark light work best.","code":""},{"path":[]},{"path":"https://ct-data-haven.github.io/stylehaven/reference/palx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make multi-hue, multi-shade qualitative color palettes — palx","text":"","code":"palx(\"#9CCC0C\") # returns a list #> $shade01 #>   fuschia       red    orange    yellow     green      teal      blue    indigo  #> \"#290221\" \"#290202\" \"#291602\" \"#1E2902\" \"#022905\" \"#022923\" \"#021029\" \"#130229\"  #>      gray  #> \"#171813\"  #>  #> $shade02 #>   fuschia       red    orange    yellow     green      teal      blue    indigo  #> \"#540543\" \"#540505\" \"#542D05\" \"#3D5405\" \"#05540B\" \"#055449\" \"#052154\" \"#270554\"  #>      gray  #> \"#2F3227\"  #>  #> $shade03 #>   fuschia       red    orange    yellow     green      teal      blue    indigo  #> \"#800866\" \"#800808\" \"#804408\" \"#5D8008\" \"#088010\" \"#08806F\" \"#083380\" \"#3B0880\"  #>      gray  #> \"#484C3B\"  #>  #> $shade04 #>   fuschia       red    orange    yellow     green      teal      blue    indigo  #> \"#AB0A89\" \"#AB0A0A\" \"#AB5A0A\" \"#7DAB0A\" \"#0AAB16\" \"#0AAB94\" \"#0A44AB\" \"#4F0AAB\"  #>      gray  #> \"#606650\"  #>  #> $shade05 #>   fuschia       red    orange    yellow     green      teal      blue    indigo  #> \"#DA0DAE\" \"#DA0D0D\" \"#DA730D\" \"#9FDA0D\" \"#0DDA1C\" \"#0DDABD\" \"#0D57DA\" \"#640DDA\"  #>      gray  #> \"#7B8265\"  #>  #> $shade06 #>   fuschia       red    orange    yellow     green      teal      blue    indigo  #> \"#F332CA\" \"#F33232\" \"#F39332\" \"#BCF332\" \"#32F340\" \"#32F3D8\" \"#3277F3\" \"#8532F3\"  #>      gray  #> \"#99A086\"  #>  #> $shade07 #>   fuschia       red    orange    yellow     green      teal      blue    indigo  #> \"#F66DD9\" \"#F66D6D\" \"#F6B26D\" \"#CFF66D\" \"#6DF677\" \"#6DF6E3\" \"#6D9FF6\" \"#A86DF6\"  #>      gray  #> \"#B7BCA9\"  #>  #> $shade08 #>   fuschia       red    orange    yellow     green      teal      blue    indigo  #> \"#FAA8E8\" \"#FAA8A8\" \"#FAD1A8\" \"#E3FAA8\" \"#A8FAAE\" \"#A8FAEE\" \"#A8C6FA\" \"#CBA8FA\"  #>      gray  #> \"#D4D7CC\"  #>  #> $shade09 #>   fuschia       red    orange    yellow     green      teal      blue    indigo  #> \"#FDE3F8\" \"#FDE3E3\" \"#FDF0E3\" \"#F6FDE3\" \"#E3FDE5\" \"#E3FDFA\" \"#E3EDFD\" \"#EEE3FD\"  #>      gray  #> \"#F1F2EF\"  #>  #> attr(,\"class\") #> [1] \"palx\" \"list\" palx(\"#9CCC0C\", as_df = TRUE) # returns a data frame #> # A tibble: 9 × 10 #>   shade fuschia red     orange  yellow  green   teal    blue    indigo  gray    #>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #> 1     1 #290221 #290202 #291602 #1E2902 #022905 #022923 #021029 #130229 #171813 #> 2     2 #540543 #540505 #542D05 #3D5405 #05540B #055449 #052154 #270554 #2F3227 #> 3     3 #800866 #800808 #804408 #5D8008 #088010 #08806F #083380 #3B0880 #484C3B #> 4     4 #AB0A89 #AB0A0A #AB5A0A #7DAB0A #0AAB16 #0AAB94 #0A44AB #4F0AAB #606650 #> 5     5 #DA0DAE #DA0D0D #DA730D #9FDA0D #0DDA1C #0DDABD #0D57DA #640DDA #7B8265 #> 6     6 #F332CA #F33232 #F39332 #BCF332 #32F340 #32F3D8 #3277F3 #8532F3 #99A086 #> 7     7 #F66DD9 #F66D6D #F6B26D #CFF66D #6DF677 #6DF6E3 #6D9FF6 #A86DF6 #B7BCA9 #> 8     8 #FAA8E8 #FAA8A8 #FAD1A8 #E3FAA8 #A8FAAE #A8FAEE #A8C6FA #CBA8FA #D4D7CC #> 9     9 #FDE3F8 #FDE3E3 #FDF0E3 #F6FDE3 #E3FDE5 #E3FDFA #E3EDFD #EEE3FD #F1F2EF  # bad examples all with one hue that return weird / not very useful palettes palx(\"#ccf4fa\") # saturated but too light #> $shade01 #>   fuschia       red    orange    yellow     green      teal      blue    indigo  #> \"#530842\" \"#530808\" \"#532D08\" \"#3E5308\" \"#08530D\" \"#085347\" \"#082253\" \"#290853\"  #>      gray  #> \"#293232\"  #>  #> $shade02 #>   fuschia       red    orange    yellow     green      teal      blue    indigo  #> \"#AB1189\" \"#AB1111\" \"#AB5E11\" \"#7FAB11\" \"#11AB1B\" \"#11AB93\" \"#1146AB\" \"#5411AB\"  #>      gray  #> \"#546868\"  #>  #> $shade03 #>   fuschia       red    orange    yellow     green      teal      blue    indigo  #> \"#EB31C2\" \"#EB3131\" \"#EB8E31\" \"#B6EB31\" \"#31EB3D\" \"#31EBCF\" \"#3172EB\" \"#8231EB\"  #>      gray  #> \"#829A9A\"  #>  #> $shade04 #>   fuschia       red    orange    yellow     green      teal      blue    indigo  #> \"#F389DC\" \"#F38989\" \"#F3BE89\" \"#D5F389\" \"#89F390\" \"#89F3E3\" \"#89AEF3\" \"#B789F3\"  #>      gray  #> \"#B7C5C5\"  #>  #> $shade05 #>   fuschia       red    orange    yellow     green      teal      blue    indigo  #> \"#FACFF1\" \"#FACFCF\" \"#FAE4CF\" \"#EEFACF\" \"#CFFAD1\" \"#CFFAF4\" \"#CFDEFA\" \"#E2CFFA\"  #>      gray  #> \"#E2E7E7\"  #>  #> $shade06 #>   fuschia       red    orange    yellow     green      teal      blue    indigo  #> \"#FBD9F4\" \"#FBD9D9\" \"#FBEAD9\" \"#F2FBD9\" \"#D9FBDC\" \"#D9FBF6\" \"#D9E5FB\" \"#E8D9FB\"  #>      gray  #> \"#E8EDED\"  #>  #> $shade07 #>   fuschia       red    orange    yellow     green      teal      blue    indigo  #> \"#FCE4F7\" \"#FCE4E4\" \"#FCF0E4\" \"#F6FCE4\" \"#E4FCE6\" \"#E4FCF9\" \"#E4EDFC\" \"#EFE4FC\"  #>      gray  #> \"#EFF2F2\"  #>  #> $shade08 #>   fuschia       red    orange    yellow     green      teal      blue    indigo  #> \"#FDEFFA\" \"#FDEFEF\" \"#FDF6EF\" \"#F9FDEF\" \"#EFFDF0\" \"#EFFDFB\" \"#EFF4FD\" \"#F5EFFD\"  #>      gray  #> \"#F5F7F7\"  #>  #> $shade09 #>   fuschia       red    orange    yellow     green      teal      blue    indigo  #> \"#FEFAFD\" \"#FEFAFA\" \"#FEFCFA\" \"#FDFEFA\" \"#FAFEFA\" \"#FAFEFE\" \"#FAFCFE\" \"#FCFAFE\"  #>      gray  #> \"#FCFDFD\"  #>  #> attr(,\"class\") #> [1] \"palx\" \"list\" palx(\"#6c888d\") # not too light, but not saturated enough #> $shade01 #>   fuschia       red    orange    yellow     green      teal      blue    indigo  #> \"#1C161B\" \"#1C1616\" \"#1C1916\" \"#1A1C16\" \"#161C16\" \"#161C1B\" \"#16181C\" \"#18161C\"  #>      gray  #> \"#161B1C\"  #>  #> $shade02 #>   fuschia       red    orange    yellow     green      teal      blue    indigo  #> \"#3A2D37\" \"#3A2D2D\" \"#3A342D\" \"#363A2D\" \"#2D3A2D\" \"#2D3A38\" \"#2D323A\" \"#322D3A\"  #>      gray  #> \"#2D383A\"  #>  #> $shade03 #>   fuschia       red    orange    yellow     green      teal      blue    indigo  #> \"#584454\" \"#584444\" \"#584E44\" \"#535844\" \"#445845\" \"#445855\" \"#444B58\" \"#4C4458\"  #>      gray  #> \"#445458\"  #>  #> $shade04 #>   fuschia       red    orange    yellow     green      teal      blue    indigo  #> \"#765A70\" \"#765A5A\" \"#76695A\" \"#6F765A\" \"#5A765C\" \"#5A7672\" \"#5A6576\" \"#665A76\"  #>      gray  #> \"#5B7175\"  #>  #> $shade05 #>   fuschia       red    orange    yellow     green      teal      blue    indigo  #> \"#93738C\" \"#937373\" \"#938473\" \"#8A9373\" \"#739375\" \"#73938E\" \"#737F93\" \"#817393\"  #>      gray  #> \"#748D92\"  #>  #> $shade06 #>   fuschia       red    orange    yellow     green      teal      blue    indigo  #> \"#AC92A6\" \"#AC9292\" \"#AC9F92\" \"#A5AC92\" \"#92AC94\" \"#92ACA8\" \"#929BAC\" \"#9D92AC\"  #>      gray  #> \"#93A7AB\"  #>  #> $shade07 #>   fuschia       red    orange    yellow     green      teal      blue    indigo  #> \"#C4B1C0\" \"#C4B1B1\" \"#C4BBB1\" \"#BFC4B1\" \"#B1C4B3\" \"#B1C4C1\" \"#B1B8C4\" \"#B9B1C4\"  #>      gray  #> \"#B2C0C3\"  #>  #> $shade08 #>   fuschia       red    orange    yellow     green      teal      blue    indigo  #> \"#DCD1D9\" \"#DCD1D1\" \"#DCD6D1\" \"#D9DCD1\" \"#D1DCD1\" \"#D1DCDA\" \"#D1D5DC\" \"#D5D1DC\"  #>      gray  #> \"#D1DADB\"  #>  #> $shade09 #>   fuschia       red    orange    yellow     green      teal      blue    indigo  #> \"#F4F0F3\" \"#F4F0F0\" \"#F4F2F0\" \"#F3F4F0\" \"#F0F4F0\" \"#F0F4F3\" \"#F0F1F4\" \"#F2F0F4\"  #>      gray  #> \"#F0F3F4\"  #>  #> attr(,\"class\") #> [1] \"palx\" \"list\" palx(\"#0e91a7\") # much better--high saturation, middle lightness #> $shade01 #>   fuschia       red    orange    yellow     green      teal      blue    indigo  #> \"#21031B\" \"#210303\" \"#211203\" \"#192103\" \"#032105\" \"#03211D\" \"#030E21\" \"#100321\"  #>      gray  #> \"#101414\"  #>  #> $shade02 #>   fuschia       red    orange    yellow     green      teal      blue    indigo  #> \"#450637\" \"#450606\" \"#452606\" \"#334506\" \"#06450A\" \"#06453C\" \"#061C45\" \"#210645\"  #>      gray  #> \"#21292A\"  #>  #> $shade03 #>   fuschia       red    orange    yellow     green      teal      blue    indigo  #> \"#680954\" \"#680909\" \"#683909\" \"#4D6809\" \"#096810\" \"#09685B\" \"#092B68\" \"#320968\"  #>      gray  #> \"#313E40\"  #>  #> $shade04 #>   fuschia       red    orange    yellow     green      teal      blue    indigo  #> \"#8C0C70\" \"#8C0C0C\" \"#8C4C0C\" \"#678C0C\" \"#0C8C15\" \"#0C8C79\" \"#0C3A8C\" \"#430C8C\"  #>      gray  #> \"#425355\"  #>  #> $shade05 #>   fuschia       red    orange    yellow     green      teal      blue    indigo  #> \"#B60F92\" \"#B60F0F\" \"#B6630F\" \"#86B60F\" \"#0FB61B\" \"#0FB69E\" \"#0F4BB6\" \"#570FB6\"  #>      gray  #> \"#566C6F\"  #>  #> $shade06 #>   fuschia       red    orange    yellow     green      teal      blue    indigo  #> \"#EC1FC0\" \"#EC1F1F\" \"#EC861F\" \"#B1EC1F\" \"#1FEC2E\" \"#1FECCF\" \"#1F69EC\" \"#781FEC\"  #>      gray  #> \"#769195\"  #>  #> $shade07 #>   fuschia       red    orange    yellow     green      teal      blue    indigo  #> \"#F260D2\" \"#F26060\" \"#F2A960\" \"#C8F260\" \"#60F26A\" \"#60F2DD\" \"#6094F2\" \"#9F60F2\"  #>      gray  #> \"#9EB1B4\"  #>  #> $shade08 #>   fuschia       red    orange    yellow     green      teal      blue    indigo  #> \"#F7A0E4\" \"#F7A0A0\" \"#F7CCA0\" \"#DEF7A0\" \"#A0F7A6\" \"#A0F7EB\" \"#A0BFF7\" \"#C6A0F7\"  #>      gray  #> \"#C5D0D2\"  #>  #> $shade09 #>   fuschia       red    orange    yellow     green      teal      blue    indigo  #> \"#FCE1F6\" \"#FCE1E1\" \"#FCEFE1\" \"#F4FCE1\" \"#E1FCE3\" \"#E1FCF8\" \"#E1EBFC\" \"#EDE1FC\"  #>      gray  #> \"#ECF0F1\"  #>  #> attr(,\"class\") #> [1] \"palx\" \"list\""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/rent_x_income.html","id":null,"dir":"Reference","previous_headings":"","what":"Rent and income data — rent_x_income","title":"Rent and income data — rent_x_income","text":"data tables 2019 American Community Survey New Haven County, useful comparing household incomes local rents way measure rent affordability.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/rent_x_income.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rent and income data — rent_x_income","text":"","code":"rent_x_income"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/rent_x_income.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Rent and income data — rent_x_income","text":"data frame 48 rows 6 variables: name Town name bedrooms Whether values correspond housing units, just 2-bedroom units renters Number renter households income Median household income renter households annual_rent Annual rent, calculated 12 * median gross rent income_needed Income needed median rent make 30 percent household's income, per HUD housing affordability guidelines. Beyond , household considered cost-burdened.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/rent_x_income.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Rent and income data — rent_x_income","text":"US Census Bureau 2019 American Community Survey tables B25119, B25031, B25042.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/round_sum100.html","id":null,"dir":"Reference","previous_headings":"","what":"Round a set of numbers so they'll add up to 100 — round_sum100","title":"Round a set of numbers so they'll add up to 100 — round_sum100","text":"function takes vector numbers rounds coerce add 100. works best numbers several decimal places close adding 100. definitely fool-proof, can help situations like waffle charts previous rounding may make numbers add exactly 100.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/round_sum100.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round a set of numbers so they'll add up to 100 — round_sum100","text":"","code":"round_sum100(x, digits = 0, verbose = FALSE)"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/round_sum100.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round a set of numbers so they'll add up to 100 — round_sum100","text":"x numeric vector digits Number digits use rounding; probably need change . Default: 0 verbose Logical; TRUE, print sum, letting confirm whether numbers indeed add 100. Defaults FALSE.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/round_sum100.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Round a set of numbers so they'll add up to 100 — round_sum100","text":"numeric vector hopefully adds 100.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/round_sum100.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Round a set of numbers so they'll add up to 100 — round_sum100","text":"","code":"round_sum100(c(9.2124, 40.292, 50.2), 0) # yay #> [1]  9 41 50 round_sum100(c(0.24, 0.61, 0.15) * 100) # yay #> [1] 24 61 15 round_sum100(c(0.24, 0.6, 0.15) * 100) # sad #> [1] 24 60 15"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/scaffold_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup directories for a typical DataHaven project — scaffold_project","title":"Setup directories for a typical DataHaven project — scaffold_project","text":"sets typical (opinionated) project directory structure use many projects DataHaven. write directories specified path, overwrite directories already exist. option cancel anything written.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/scaffold_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup directories for a typical DataHaven project — scaffold_project","text":"","code":"scaffold_project(   dir = \".\",   input_data = TRUE,   output_data = TRUE,   fetch_data = TRUE,   analysis = TRUE,   prep_scripts = FALSE,   plots = FALSE,   format_tables = FALSE,   drafts = FALSE,   utils = TRUE,   addl = NULL,   gitblank = TRUE,   dryrun = FALSE )"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/scaffold_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup directories for a typical DataHaven project — scaffold_project","text":"dir String: path directory new files written. Default: '.' input_data Create directory input_data. Default: TRUE. Standard use: data outside source analyzed project. output_data Create directory output_data. Default: TRUE. Standard use: data written analysis done project, generally formats can still used analysis visualization (csv, rds) rather formats distribution (usually add folder to_distro) pass client (xlsx). Nice spreadsheet outputs go format_tables distribution-centered folder. fetch_data Create directory fetch_data. Default: TRUE. Standard use: place dump data comes API calls, queries, batch file downloads, etc. analysis Create directory analysis. Default: TRUE Standard use: main analysis scripts, notebooks .R scripts. prep_scripts Create directory prep_scripts. Default: FALSE Standard use: scripts use prep reshape data documents, e.g. creating formatted spreadsheets client, making metadata, prepping post data.world, formatting website, bulk rendering parameterized Rmarkdown documents. plots Create directory plots. Default: FALSE Standard use: plots, either -house use outside distribution. format_tables Create directory format_tables. Default: FALSE Standard use: spreadsheets--probably written script prep_scripts--shared clients collaborators. Think files appropriate presentation addenda report, analysis. drafts Create directory drafts. Default: FALSE Standard use: separating EDA-centered notebooks notebooks used drafting writing. Also good place keep files edited outside software (.docx, etc). utils Create directory utils. Default: TRUE Standard use: utility scripts miscellaneous files, e.g. logo images, snippets data, lists colors use. addl string vector additional directories create. Default: NULL gitblank Logical: whether write blank placeholder file new directory force git tracking, even without yet folder contents. Default: TRUE. FALSE, empty directories tracked git. dryrun Logical: whether just dry run without actually writing directories files. Defaults FALSE.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/scaffold_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup directories for a typical DataHaven project — scaffold_project","text":"Returns nothing, prints paths newly created directories.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/scaffold_project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setup directories for a typical DataHaven project — scaffold_project","text":"","code":"# create default folders--good for small analysis projects scaffold_project(dryrun = TRUE) #> ℹ Note that this is just a dry run. You'll see the normal printouts but no files will actually be written. #> ℹ The following new directories will be created: #> • _utils #> • analysis #> • fetch_data #> • input_data #> • output_data #> ──────────────────────────────────────────────────────────────────────────────── #> → Writing ./_utils #> → Writing ./analysis #> → Writing ./fetch_data #> → Writing ./input_data #> → Writing ./output_data  # create all available folders--good for larger print projects scaffold_project(prep_scripts = TRUE,                   plots = TRUE,                  format_tables = TRUE,                  drafts = TRUE,                  dryrun = TRUE) #> ℹ Note that this is just a dry run. You'll see the normal printouts but no files will actually be written. #> ℹ The following new directories will be created: #> • _utils #> • analysis #> • drafts #> • fetch_data #> • format_tables #> • input_data #> • output_data #> • plots #> • prep_scripts #> ──────────────────────────────────────────────────────────────────────────────── #> → Writing ./_utils #> → Writing ./analysis #> → Writing ./drafts #> → Writing ./fetch_data #> → Writing ./format_tables #> → Writing ./input_data #> → Writing ./output_data #> → Writing ./plots #> → Writing ./prep_scripts"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/scale_y_barcontinuous.html","id":null,"dir":"Reference","previous_headings":"","what":"Set a continuous scale more suited to bar charts — scale_y_barcontinuous","title":"Set a continuous scale more suited to bar charts — scale_y_barcontinuous","text":"light wrapper around ggplot2::scale_y_continuous sets expand argument mult = c(0, 0.05). purpose just align bases bars x-axis, rather default leaves gap bars x-axis.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/scale_y_barcontinuous.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set a continuous scale more suited to bar charts — scale_y_barcontinuous","text":"","code":"scale_y_barcontinuous(top = 0.05, ...)"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/scale_y_barcontinuous.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set a continuous scale more suited to bar charts — scale_y_barcontinuous","text":"top Numeric, giving ratio set upper padding. Defaults 0.05, case underlying ggplot2::scale_y_continuous. ... Additional arguments passed ggplot2::scale_y_continuous.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/self_rated_health.html","id":null,"dir":"Reference","previous_headings":"","what":"2018 DCWS sample indicators: self-rated health — self_rated_health","title":"2018 DCWS sample indicators: self-rated health — self_rated_health","text":"subset 2018 DataHaven Community Wellbeing Survey data Greater New Haven, just including question self-rated health. Unlike DCWS datasets package, includes response options.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/self_rated_health.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"2018 DCWS sample indicators: self-rated health — self_rated_health","text":"","code":"self_rated_health"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/self_rated_health.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"2018 DCWS sample indicators: self-rated health — self_rated_health","text":"data frame 100 rows 4 variables: category Category: gender, age, etc. group Group: male, female, ages 18–34, etc. response Response: excellent, good, good, fair, poor value Percentage value","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/self_rated_health.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"2018 DCWS sample indicators: self-rated health — self_rated_health","text":"2018 DataHaven Community Wellbeing Survey","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/stack_lbls.html","id":null,"dir":"Reference","previous_headings":"","what":"Stack labels cumulatively — stack_lbls","title":"Stack labels cumulatively — stack_lbls","text":"small utility function, intended calculate position labels stacked bar charts. Usually ggplot, position_stack position_fill suffice, sometimes need calculations manually specific label placement. common labels placed middle segment, just option allows labels aligned ratio along length segment. Note function concerned numeric values. likely want arrange / group data passing values stack_lbls.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/stack_lbls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stack labels cumulatively — stack_lbls","text":"","code":"stack_lbls(x, just = 0.5, fill = FALSE)"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/stack_lbls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stack labels cumulatively — stack_lbls","text":"x Numeric vector stack just Numeric value representing ratio place labels, comparable hjust vjust arguments plotting functions. often want single value, though setting segment's justification can also useful. Logically values 0 1, nothing's stopping using values outside range. Defaults 0.5 centered values. fill Logical: stacked values rescaled range 0 1? Defaults FALSE, returning values scale supplied.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/stack_lbls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stack labels cumulatively — stack_lbls","text":"vector stacked values length x. length x multiple length just, get warnings.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/stack_lbls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stack labels cumulatively — stack_lbls","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(ggplot2) df <- self_rated_health |>   filter(category %in% c(\"Greater New Haven\", \"Gender\")) |>   group_by(group)  # place labels at centers of bars--should be the same as just using position_stack df_center <- df |>   mutate(centered = stack_lbls(value))  ggplot(df_center, aes(x = group, y = value, fill = response)) +   geom_col(position = position_stack(reverse = TRUE)) +   geom_text(aes(label = percent100(value), y = centered))   # offset very small values for the top bar df_offset <- df_center |>   mutate(offset = ifelse(response == last(response) & value < 0.03, 1.01, centered))  ggplot(df_offset, aes(x = group, y = value, fill = response)) +   geom_col(position = position_stack(reverse = TRUE)) +   geom_text(aes(label = percent100(value), y = offset))   # replace the legend with direct labels along the last stack of bars df_top <- df |>   mutate(top = stack_lbls(value, just = 1)) |>   ungroup()  ggplot(df_top, aes(x = group, y = value, fill = response)) +   geom_col(position = position_stack(reverse = TRUE)) +   geom_text(aes(label = response, color = response, y = top),             data = ~slice_max(., group),             hjust = 0, vjust = 1, nudge_x = 0.5) +   scale_x_discrete(expand = expansion(add = c(0.8, 1.5))) +   theme(legend.position = \"none\")"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/stdev_brks.html","id":null,"dir":"Reference","previous_headings":"","what":"Create labeled intervals based on standard deviations — stdev_brks","title":"Create labeled intervals based on standard deviations — stdev_brks","text":"Occasionally make charts using standard deviations away average value fill bars geographies---hard task, tedious. function takes data frame, gets midpoint value, either calculating mean filtering observation already data frame (statewide value). calculates z-scores based midpoint standard deviation, cuts z-scores based brks. Pay close attention argument , allows calculations grouped column; useful data frame several different indicators. Alternatively, passing grouped data frame also calculations group.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/stdev_brks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create labeled intervals based on standard deviations — stdev_brks","text":"","code":"stdev_brks(   x,   value = value,   filters = NULL,   by = NULL,   brks = c(-2, -1/2, 1/2, 2),   labels = NULL,   na.rm = TRUE,   keep_calcs = TRUE,   ... )"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/stdev_brks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create labeled intervals based on standard deviations — stdev_brks","text":"x data frame tibble value Bare name numeric value column, Default: value filters optional named list values use filtering. given, observation matching values used midpoint. NULL (default), midpoint calculated mean values, grouped x's grouping columns () arguments (also ). Optional character vector. given, used group within intervals calculated. Default: NULL brks Numeric vector break points cutting z-scores. vector, plus -Inf Inf, passed base::cut's breaks argument. Default: c(-2, -1/2, 1/2, 2) labels Character vector labels resulting factor. NULL, levels base::cut's interval notation. length vector one length brks. Default: NULL na.rm Boolean passed mean midpoints calculated. Default: TRUE keep_calcs Boolean, whether keep columns calculations. Default: TRUE ... Additional arguments passed base::cut","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/stdev_brks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create labeled intervals based on standard deviations — stdev_brks","text":"data frame tibble number rows x. keep_calcs true, returned data frame numeric columns added midpoint (midpt), standard deviation (sd), z-score (z), factor column resulting intervals (brk). false, column added intervals.","code":""},{"path":[]},{"path":"https://ct-data-haven.github.io/stylehaven/reference/stdev_brks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create labeled intervals based on standard deviations — stdev_brks","text":"","code":"# Calculate intervals along the full dataset, based on calculated mean stdev_brks(life_exp,             labels = c(\"Lower\", \"Somewhat lower\", \"Average\", \"Somewhat higher\", \"Higher\")) #> # A tibble: 189 × 7 #>    tract       town      value midpt    sd      z brk             #>    <chr>       <chr>     <dbl> <dbl> <dbl>  <dbl> <fct>           #>  1 09009142500 New Haven  75.6  79.3  3.11 -1.19  Somewhat lower  #>  2 09009361402 New Haven  NA    79.3  3.11 NA     NA              #>  3 09009140900 New Haven  77.9  79.3  3.11 -0.447 Average         #>  4 09009142000 New Haven  82.5  79.3  3.11  1.03  Somewhat higher #>  5 09009141800 New Haven  82.3  79.3  3.11  0.970 Somewhat higher #>  6 09009140300 New Haven  76.9  79.3  3.11 -0.769 Somewhat lower  #>  7 09009142700 New Haven  80.4  79.3  3.11  0.358 Average         #>  8 09009140100 New Haven  80.3  79.3  3.11  0.326 Average         #>  9 09009142100 New Haven  NA    79.3  3.11 NA     NA              #> 10 09009141200 New Haven  77    79.3  3.11 -0.736 Somewhat lower  #> # ℹ 179 more rows             # Calculate intervals for each of the three indicators in the `question` column.  # Both examples have the same result: fin_insecurity |>   stdev_brks(filters = list(category = \"Connecticut\"), by = \"question\") #> # A tibble: 69 × 8 #>    question        category          group       value midpt     sd      z brk   #>    <chr>           <fct>             <fct>       <dbl> <dbl>  <dbl>  <dbl> <fct> #>  1 food_insecurity Connecticut       Connecticut  0.13  0.13 0.0889  0     (-0.… #>  2 food_insecurity Greater New Haven Greater Ne…  0.13  0.13 0.0889  0     (-0.… #>  3 food_insecurity Gender            Men          0.12  0.13 0.0889 -0.112 (-0.… #>  4 food_insecurity Gender            Women        0.14  0.13 0.0889  0.112 (-0.… #>  5 food_insecurity Age               Ages 18-34   0.18  0.13 0.0889  0.562 (0.5… #>  6 food_insecurity Age               Ages 35-49   0.2   0.13 0.0889  0.787 (0.5… #>  7 food_insecurity Age               Ages 50-64   0.1   0.13 0.0889 -0.337 (-0.… #>  8 food_insecurity Age               Ages 65+     0.05  0.13 0.0889 -0.899 (-2,… #>  9 food_insecurity Race/Ethnicity    White        0.09  0.13 0.0889 -0.450 (-0.… #> 10 food_insecurity Race/Ethnicity    Black        0.2   0.13 0.0889  0.787 (0.5… #> # ℹ 59 more rows  fin_insecurity |>   dplyr::group_by(question) |>   stdev_brks(filters = list(category = \"Connecticut\")) #> # A tibble: 69 × 8 #> # Groups:   question [3] #>    question        category          group       value midpt     sd      z brk   #>    <chr>           <fct>             <fct>       <dbl> <dbl>  <dbl>  <dbl> <fct> #>  1 food_insecurity Connecticut       Connecticut  0.13  0.13 0.0889  0     (-0.… #>  2 food_insecurity Greater New Haven Greater Ne…  0.13  0.13 0.0889  0     (-0.… #>  3 food_insecurity Gender            Men          0.12  0.13 0.0889 -0.112 (-0.… #>  4 food_insecurity Gender            Women        0.14  0.13 0.0889  0.112 (-0.… #>  5 food_insecurity Age               Ages 18-34   0.18  0.13 0.0889  0.562 (0.5… #>  6 food_insecurity Age               Ages 35-49   0.2   0.13 0.0889  0.787 (0.5… #>  7 food_insecurity Age               Ages 50-64   0.1   0.13 0.0889 -0.337 (-0.… #>  8 food_insecurity Age               Ages 65+     0.05  0.13 0.0889 -0.899 (-2,… #>  9 food_insecurity Race/Ethnicity    White        0.09  0.13 0.0889 -0.450 (-0.… #> 10 food_insecurity Race/Ethnicity    Black        0.2   0.13 0.0889  0.787 (0.5… #> # ℹ 59 more rows"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers — tidyeval","title":"Tidy eval helpers — tidyeval","text":"sym() creates symbol string syms() creates list symbols character vector. enquo() enquos() delay execution one several function arguments. enquo() returns single quoted expression, like blueprint delayed computation. enquos() returns list quoted expressions. expr() quotes new expression locally. mostly useful build new expressions around arguments captured enquo() enquos(): expr(mean(!!enquo(arg), na.rm = TRUE)). as_name() transforms quoted variable name string. Supplying something else quoted variable name error. unlike as_label() also returns single string supports kind R object input, including quoted function calls vectors. purpose summarise object single label. label often suitable default name. know quoted expression contains (instance expressions captured enquo() variable name, call function, unquoted constant), use as_label(). know quoted simple variable name, like enforce , use as_name(). learn tidy eval use tools, visit https://tidyeval.tidyverse.org Metaprogramming section Advanced R.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/title_case.html","id":null,"dir":"Reference","previous_headings":"","what":"String utilities — title_case","title":"String utilities — title_case","text":"collection functions common string transformations.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/title_case.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"String utilities — title_case","text":"","code":"title_case(x, lower = NULL)"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/title_case.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"String utilities — title_case","text":"x character vector alter lower Aside built-list articles prepositions, additional words kept lowercase.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/title_case.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"String utilities — title_case","text":"character vector","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/title_case.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"String utilities — title_case","text":"title_case wrapper around stringr::str_to_title, corrects fact words title capitalized (articles, prepositions, etc. beginning title). follows APA style guide best , may exceptions fix manually (see examples).","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/title_case.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"String utilities — title_case","text":"","code":"title_case(c(\"Rates are rising in the area\", \"Of all adults in the region\")) #> [1] \"Rates Are Rising in the Area\" \"Of All Adults in the Region\"  title_case(\"Rates are going up in the area\") # This result is technically #> [1] \"Rates Are Going up in the Area\" # incorrect--\"up\" is used as an adverb here, and under APA should be # capitalized. Write this one out manually."},{"path":"https://ct-data-haven.github.io/stylehaven/reference/write_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Batch save plots to multiple formats. — write_plot","title":"Batch save plots to multiple formats. — write_plot","text":"formalized version function often utils scripts different projects. works well paired purrr::map, taking list plots list parameters (width, height, filename), saving PDF (good vector format) PNG (good decent resolution bitmap format) files using ggplot2::ggsave. default, add logo bottom plot using add_logo—look documentation see exactly pass logo. Note devices might act differently: example, SVG devices might quirks.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/write_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batch save plots to multiple formats. — write_plot","text":"","code":"write_plot(   plot,   filename,   width = 7,   height = 4.5,   add_logo = TRUE,   use_abs_logo = TRUE,   logo_abs = 0.15,   logo_scale = 0.05,   logo_img = NULL,   logo_pos = \"right\",   place_inside = FALSE,   dir = NULL,   separate_dirs = TRUE,   devs = list(pdf = grDevices::cairo_pdf, png = ragg::agg_png),   verbose = TRUE,   ... )"},{"path":"https://ct-data-haven.github.io/stylehaven/reference/write_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Batch save plots to multiple formats. — write_plot","text":"plot ggplot object save filename String, filename without extension, e.g. \"cool_plot\" rather \"cool_plot.png\", since extensions added based devs argument. width Numeric, width saved plot inches. Default: 7 height Numeric, height saved plot inches. include additional height logo. Default: 4.5 add_logo Logical: TRUE (default), logo added plot using add_logo. use_abs_logo Logical, whether logo size supplied absolute (TRUE) relative plot height (FALSE). TRUE (default), logo height given logo_abs inches; otherwise, logo sized ratio plot height given logo_scale. batch writing plots, using absolute size probably best logo size charts, regardless chart's height. logo_abs absolute height logo, inches. Ignored use_abs_logo = FALSE. Default: 0.15 logo_scale ratio logo's height plot's height. Ignored use_abs_logo = TRUE. Default: 0.05 logo_img NULL (default), logo image saved system.file(\"extdata/logo.svg\", package = \"stylehaven\"), copy DataHaven's logo. See add_logo ways create supply logo. logo_pos String, side plot logo placed . Default: 'right' place_inside Logical, whether logo placed inside chart outside (default). Note opposite default add_logo—often placing logo inside chart works well, batch writing probably safer either default outside placement, use parameter alongside width & height. dir Directory write files. NULL, default, just working directory, case ggplot2::ggsave. separate_dirs Logical, whether save files separate directories based file type. TRUE (default), file \"cool_plot.png\" written \"dir/png/cool_plot.png\"; otherwise, file written just dir. necessary directories already exist, created. devs named list, names extensions use output files values specify graphics devices use, either strings functions (mix). See device argument ggplot2::ggsave() examples. defaults, c(pdf = cairo_pdf, png = ragg::agg_png), ones found work well writing ggplots, particularly high-resolution ones custom fonts. verbose Logical, whether print path file written (defaults TRUE). ... Additional arguments pass ggplot2::ggsave, turn passes graphics devices.","code":""},{"path":"https://ct-data-haven.github.io/stylehaven/reference/write_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Batch save plots to multiple formats. — write_plot","text":"Returns nothing. verbose = TRUE, sends message console.","code":""},{"path":[]},{"path":"https://ct-data-haven.github.io/stylehaven/reference/write_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Batch save plots to multiple formats. — write_plot","text":"","code":"if (FALSE) {   library(ggplot2)   plot1 <- ggplot(mtcars, aes(x = hp)) +     geom_density()   write_plot(plot1, \"hp_density\")   write_plot(plot1, \"hp_density\", devs = list(png = \"png\", svg = svg))   ggsave(\"svg/plot.svg\", plot1, device = svglite::svglite)    # how I usually use this for a whole document of plots   plots <- list()   plots[[\"mpg_histogram\"]] <- ggplot(mtcars, aes(x = mpg)) +     geom_histogram()   plots[[\"hp_vs_mpg\"]] <- ggplot(mtcars, aes(x = hp, y = mpg)) +     geom_point()   plot_params <- list(     mpg_histogram = list(w = 7, h = 4),     hp_vs_mpg = list(w = 5, h = 5)   )   purrr::imap(plots, function(plt, id) {     # using plot ID as the filename     params <- plot_params[[id]]     write_plot(plt, filename = id,                width = params$w,                height = params$h,                logo_abs = 0.2)   }) }"}]
